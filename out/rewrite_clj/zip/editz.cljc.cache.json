["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$replace"]],"~:name","~$rewrite-clj.zip.editz","~:imports",null,"~:requires",["^ ","~$options","~$rewrite-clj.zip.options","~$base","~$rewrite-clj.zip.base","~$rewrite-clj.zip.removez","^>","~$u","~$rewrite-clj.custom-zipper.utils","~$rewrite-clj.node.token","^@","~$r","^>","~$rewrite-clj.custom-zipper.core","^A","~$ws","~$rewrite-clj.zip.whitespace","^?","^?","^;","^;","^C","^C","~$node","~$rewrite-clj.node.protocols","^E","^E","~$ntoken","^@","~$zraw","^A","^=","^=","~$rewrite-clj.node.whitespace","^H","~$nwhitespace","^H"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","^5",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/editz.cljc","~:line",17,"~:column",7,"~:end-line",17,"~:end-column",14,"~:arglists",["~#list",["~$quote",["^U",[["~$zloc","~$item"]]]]],"~:doc","Return `zloc` with the current node replaced by `item`.\n  If `item` is not already a node, an attempt will be made to coerce it to one.\n\n  Use [[replace*]] for non-coercing version of replace."],"^6","~$rewrite-clj.zip.editz/replace","^O","out/rewrite_clj/zip/editz.cljc","^S",14,"~:method-params",["^U",[["^W","^X"]]],"~:protocol-impl",null,"~:arglists-meta",["^U",[null,null]],"^Q",1,"~:variadic?",false,"^P",17,"~:ret-tag",["^4",["~$clj","~$any","~$cljs.core/MetaFn","~$clj-nil"]],"^R",17,"~:max-fixed-arity",2,"~:fn-var",true,"^T",["^U",["^V",["^U",[["^W","^X"]]]]],"^Y","Return `zloc` with the current node replaced by `item`.\n  If `item` is not already a node, an attempt will be made to coerce it to one.\n\n  Use [[replace*]] for non-coercing version of replace."],"~$node-editor",["^ ","^M",null,"^N",["^ ","^O","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/editz.cljc","^P",25,"^Q",8,"^R",25,"^S",19,"~:private",true,"^T",["^U",["^V",["^U",[["~$opts"]]]]],"^Y","Create s-expression from node, apply the function and create\n   node from the result."],"^1;",true,"^6","~$rewrite-clj.zip.editz/node-editor","^O","out/rewrite_clj/zip/editz.cljc","^S",19,"^[",["^U",[["^1<"]]],"^10",null,"^11",["^U",[null,null]],"^Q",1,"^12",false,"^P",25,"^13","~$function","^R",25,"^18",1,"^19",true,"^T",["^U",["^V",["^U",[["^1<"]]]]],"^Y","Create s-expression from node, apply the function and create\n   node from the result."],"~$edit",["^ ","^M",null,"^N",["^ ","^O","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/editz.cljc","^P",34,"^Q",7,"^R",34,"^S",11,"^T",["^U",["^V",["^U",[["^W","~$f","~$&","~$args"]]]]],"^Y","Return `zloc` with the current node replaced with the result of:\n\n   `(apply f (s-expr current-node) args)`\n\n  The result of `f`, if not already a node, will be coerced to a node if possible.\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances).\n\n  Use [[edit*]] for non-coercing version of edit.","~:top-fn",["^ ","^12",true,"~:fixed-arity",2,"^18",2,"^[",[["^U",["^W","~$f","^1@"]]],"^T",["^U",[["^W","~$f","~$&","^1@"]]],"^11",["^U",[null]]]],"^6","~$rewrite-clj.zip.editz/edit","^O","out/rewrite_clj/zip/editz.cljc","^S",11,"^1A",["^ ","^12",true,"^1B",2,"^18",2,"^[",[["^U",["^W","~$f","^1@"]]],"^T",["^U",[["^W","~$f","~$&","^1@"]]],"^11",["^U",[null]]],"^[",[["^U",["^W","~$f","^1@"]]],"^10",null,"^1B",2,"^11",["^U",[null]],"^Q",1,"^12",true,"~:methods",[["^ ","^1B",2,"^12",true,"~:tag",["^4",["^14","^15","^16","^17"]]]],"^P",34,"^13","^15","^R",34,"^18",2,"^19",true,"^T",["^U",[["^W","~$f","~$&","^1@"]]],"^Y","Return `zloc` with the current node replaced with the result of:\n\n   `(apply f (s-expr current-node) args)`\n\n  The result of `f`, if not already a node, will be coerced to a node if possible.\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances).\n\n  Use [[edit*]] for non-coercing version of edit."],"~$splice",["^ ","^M",null,"^N",["^ ","^O","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/editz.cljc","^P",49,"^Q",7,"^R",49,"^S",13,"^T",["^U",["^V",["^U",[["^W"]]]]],"^Y","Return zipper with the children of the current node in `zloc` merged into itself.\n   (akin to Clojure's `unquote-splicing` macro: `~@...`).\n   - if the node is not one that can have children, no modification will\n     be performed.\n   - if the node has no or only whitespace children, it will be removed.\n   - otherwise, splicing will be performed, moving the zipper to the first\n     non-whitespace spliced child node.\n\n  For example, given `[[1 2 3] 4 5 6]`, if zloc is located at vector `[1 2 3]`, a splice will result in raising the vector's children up `[1 2 3 4 5 6]` and locating the zipper at node `1`."],"^6","~$rewrite-clj.zip.editz/splice","^O","out/rewrite_clj/zip/editz.cljc","^S",13,"^[",["^U",[["^W"]]],"^10",null,"^11",["^U",[null,null]],"^Q",1,"^12",false,"^P",49,"^13",["^4",[null,"^14","^15","^16","^17"]],"^R",49,"^18",1,"^19",true,"^T",["^U",["^V",["^U",[["^W"]]]]],"^Y","Return zipper with the children of the current node in `zloc` merged into itself.\n   (akin to Clojure's `unquote-splicing` macro: `~@...`).\n   - if the node is not one that can have children, no modification will\n     be performed.\n   - if the node has no or only whitespace children, it will be removed.\n   - otherwise, splicing will be performed, moving the zipper to the first\n     non-whitespace spliced child node.\n\n  For example, given `[[1 2 3] 4 5 6]`, if zloc is located at vector `[1 2 3]`, a splice will result in raising the vector's children up `[1 2 3 4 5 6]` and locating the zipper at node `1`."],"~$edit-token",["^ ","^M",null,"^N",["^ ","^O","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/editz.cljc","^P",74,"^Q",8,"^R",74,"^S",18,"^1;",true,"^T",["^U",["^V",["^U",[["^W","~$str-fn"]]]]]],"^1;",true,"^6","~$rewrite-clj.zip.editz/edit-token","^O","out/rewrite_clj/zip/editz.cljc","^S",18,"^[",["^U",[["^W","^1I"]]],"^10",null,"^11",["^U",[null,null]],"^Q",1,"^12",false,"^P",74,"^13",["^4",["^14","^15","^16","^17"]],"^R",74,"^18",2,"^19",true,"^T",["^U",["^V",["^U",[["^W","^1I"]]]]]],"~$edit-multi-line",["^ ","^M",null,"^N",["^ ","^O","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/editz.cljc","^P",82,"^Q",8,"^R",82,"^S",23,"^1;",true,"^T",["^U",["^V",["^U",[["^W","~$line-fn"]]]]]],"^1;",true,"^6","~$rewrite-clj.zip.editz/edit-multi-line","^O","out/rewrite_clj/zip/editz.cljc","^S",23,"^[",["^U",[["^W","^1L"]]],"^10",null,"^11",["^U",[null,null]],"^Q",1,"^12",false,"^P",82,"^13",["^4",["^14","^15","^16","^17"]],"^R",82,"^18",2,"^19",true,"^T",["^U",["^V",["^U",[["^W","^1L"]]]]]],"~$prefix",["^ ","^M",null,"^N",["^ ","^O","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/editz.cljc","^P",88,"^Q",7,"^R",88,"^S",13,"^T",["^U",["^V",["^U",[["^W","~$s"]]]]],"^Y","Return zipper with the current node in `zloc` prefixed with string `s`.\n   Operates on token node or a multi-line node, else exception is thrown.\n   When multi-line, first line is prefixed."],"^6","~$rewrite-clj.zip.editz/prefix","^O","out/rewrite_clj/zip/editz.cljc","^S",13,"^[",["^U",[["^W","~$s"]]],"^10",null,"^11",["^U",[null,null]],"^Q",1,"^12",false,"^P",88,"^R",88,"^18",2,"^19",true,"^T",["^U",["^V",["^U",[["^W","~$s"]]]]],"^Y","Return zipper with the current node in `zloc` prefixed with string `s`.\n   Operates on token node or a multi-line node, else exception is thrown.\n   When multi-line, first line is prefixed."],"~$suffix",["^ ","^M",null,"^N",["^ ","^O","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/editz.cljc","^P",101,"^Q",7,"^R",101,"^S",13,"^T",["^U",["^V",["^U",[["^W","~$s"]]]]],"^Y","Return zipper with the current node in `zloc` suffixed with string `s`.\n   Operates on token node or a multi-line node, else exception is thrown.\n   When multi-line, last line is suffixed."],"^6","~$rewrite-clj.zip.editz/suffix","^O","out/rewrite_clj/zip/editz.cljc","^S",13,"^[",["^U",[["^W","~$s"]]],"^10",null,"^11",["^U",[null,null]],"^Q",1,"^12",false,"^P",101,"^R",101,"^18",2,"^19",true,"^T",["^U",["^V",["^U",[["^W","~$s"]]]]],"^Y","Return zipper with the current node in `zloc` suffixed with string `s`.\n   Operates on token node or a multi-line node, else exception is thrown.\n   When multi-line, last line is suffixed."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^I","^H","^H","^H"],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:lines"]],"~:order",["^1V"]],"^Y",null,"~:as-aliases",["^ "]]
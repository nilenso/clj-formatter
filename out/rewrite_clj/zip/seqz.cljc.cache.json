["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$seq?","~$vector?","~$map","~$set?","~$map?","~$get","~$list?","~$assoc"]],"~:name","~$rewrite-clj.zip.seqz","~:imports",null,"~:requires",["^ ","~$base","~$rewrite-clj.zip.base","~$i","~$rewrite-clj.zip.insert","~$rewrite-clj.zip.findz","^D","~$rewrite-clj.custom-zipper.core","^E","~$m","~$rewrite-clj.zip.move","^C","^C","^F","^F","~$e","~$rewrite-clj.zip.editz","^G","^G","~$zraw","^E","^B","^B","~$f","^D"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","^5",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/seqz.cljc","~:line",14,"~:column",7,"~:end-line",14,"~:end-column",11,"~:arglists",["~#list",["~$quote",["^T",[["~$zloc"]]]]],"~:doc","Returns true if current node in `zloc` is a sequence."],"^=","~$rewrite-clj.zip.seqz/seq?","^N","out/rewrite_clj/zip/seqz.cljc","^R",11,"~:method-params",["^T",[["^V"]]],"~:protocol-impl",null,"~:arglists-meta",["^T",[null,null]],"^P",1,"~:variadic?",false,"^O",14,"~:ret-tag","~$boolean","^Q",14,"~:max-fixed-arity",1,"~:fn-var",true,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","Returns true if current node in `zloc` is a sequence."],"^6",["^ ","^L",null,"^M",["^ ","^N","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/seqz.cljc","^O",26,"^P",7,"^Q",26,"^R",14,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","Returns true if current node in `zloc` is a vector."],"^=","~$rewrite-clj.zip.seqz/vector?","^N","out/rewrite_clj/zip/seqz.cljc","^R",14,"^Y",["^T",[["^V"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",26,"^11","^12","^Q",26,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","Returns true if current node in `zloc` is a vector."],"~$map-vals*",["^ ","^L",null,"^M",["^ ","^N","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/seqz.cljc","^O",62,"^P",8,"^Q",62,"^R",17,"~:private",true,"^S",["^T",["^U",["^T",[["~$f","~$map-loc"]]]]]],"^17",true,"^=","~$rewrite-clj.zip.seqz/map-vals*","^N","out/rewrite_clj/zip/seqz.cljc","^R",17,"^Y",["^T",[["~$f","^18"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",62,"^11","~$any","^Q",62,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["~$f","^18"]]]]]],"^7",["^ ","^L",null,"^M",["^ ","^N","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/seqz.cljc","^O",124,"^P",7,"^Q",124,"^R",10,"^S",["^T",["^U",["^T",[["~$f","^V"]]]]],"^W","Returns `zloc` with function `f` applied to all nodes of the current node.\n  Current node must be a sequence node. Equivalent to [[rewrite-clj.zip/map-vals]] for maps.\n\n  `zloc` location is unchanged.\n\n  `f` arg is zloc positioned at\n  - value nodes for maps\n  - each element of a seq\n  and is should return:\n  - an updated zloc with zloc positioned at edited node\n  - a falsey value to leave value node unchanged\n\n  Folks typically use [[edit]] for `f`."],"^=","~$rewrite-clj.zip.seqz/map","^N","out/rewrite_clj/zip/seqz.cljc","^R",10,"^Y",["^T",[["~$f","^V"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",124,"^11",["^4",[null,"^1:","~$clj-nil"]],"^Q",124,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["~$f","^V"]]]]],"^W","Returns `zloc` with function `f` applied to all nodes of the current node.\n  Current node must be a sequence node. Equivalent to [[rewrite-clj.zip/map-vals]] for maps.\n\n  `zloc` location is unchanged.\n\n  `f` arg is zloc positioned at\n  - value nodes for maps\n  - each element of a seq\n  and is should return:\n  - an updated zloc with zloc positioned at edited node\n  - a falsey value to leave value node unchanged\n\n  Folks typically use [[edit]] for `f`."],"~$map-seq",["^ ","^L",null,"^M",["^ ","^N","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/seqz.cljc","^O",48,"^P",8,"^Q",48,"^R",15,"^17",true,"^S",["^T",["^U",["^T",[["~$f","^V"]]]]]],"^17",true,"^=","~$rewrite-clj.zip.seqz/map-seq","^N","out/rewrite_clj/zip/seqz.cljc","^R",15,"^Y",["^T",[["~$f","^V"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",48,"^11",["^4",[null,"^1:","^1<"]],"^Q",48,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["~$f","^V"]]]]]],"^8",["^ ","^L",null,"^M",["^ ","^N","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/seqz.cljc","^O",31,"^P",7,"^Q",31,"^R",11,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","Returns true if current node in `zloc` is a set."],"^=","~$rewrite-clj.zip.seqz/set?","^N","out/rewrite_clj/zip/seqz.cljc","^R",11,"^Y",["^T",[["^V"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",31,"^11","^12","^Q",31,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","Returns true if current node in `zloc` is a set."],"^9",["^ ","^L",null,"^M",["^ ","^N","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/seqz.cljc","^O",36,"^P",7,"^Q",36,"^R",11,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","Returns true if current node in `zloc` is a map."],"^=","~$rewrite-clj.zip.seqz/map?","^N","out/rewrite_clj/zip/seqz.cljc","^R",11,"^Y",["^T",[["^V"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",36,"^11","^12","^Q",36,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","Returns true if current node in `zloc` is a map."],"^:",["^ ","^L",null,"^M",["^ ","^N","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/seqz.cljc","^O",146,"^P",7,"^Q",146,"^R",10,"^S",["^T",["^U",["^T",[["^V","~$k"]]]]],"^W","Returns `zloc` located to map key node's sexpr value matching `k` else `nil`.\n\n  `k` should be:\n  - a key for maps\n  - a zero-based index for sequences\n\n  NOTE: `k` will be compared against resolved keywords in maps.\n  See docs for sexpr behavior on [namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)."],"^=","~$rewrite-clj.zip.seqz/get","^N","out/rewrite_clj/zip/seqz.cljc","^R",10,"^Y",["^T",[["^V","~$k"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",146,"^11",["^4",["^1:","^1<"]],"^Q",146,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["^V","~$k"]]]]],"^W","Returns `zloc` located to map key node's sexpr value matching `k` else `nil`.\n\n  `k` should be:\n  - a key for maps\n  - a zero-based index for sequences\n\n  NOTE: `k` will be compared against resolved keywords in maps.\n  See docs for sexpr behavior on [namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)."],"~$container-loc",["^ ","^L",null,"^M",["^ ","^N","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/seqz.cljc","^O",78,"^P",8,"^Q",78,"^R",21,"^17",true,"^S",["^T",["^U",["^T",[["^V","^18"]]]]]],"^17",true,"^=","~$rewrite-clj.zip.seqz/container-loc","^N","out/rewrite_clj/zip/seqz.cljc","^R",21,"^Y",["^T",[["^V","^18"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",78,"^11",["^4",[null,"^1:","^1<"]],"^Q",78,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["^V","^18"]]]]]],"~$map-keys*",["^ ","^L",null,"^M",["^ ","^N","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/seqz.cljc","^O",99,"^P",8,"^Q",99,"^R",17,"^17",true,"^S",["^T",["^U",["^T",[["~$f","^18"]]]]]],"^17",true,"^=","~$rewrite-clj.zip.seqz/map-keys*","^N","out/rewrite_clj/zip/seqz.cljc","^R",17,"^Y",["^T",[["~$f","^18"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",99,"^11","^1:","^Q",99,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["~$f","^18"]]]]]],"~$map-keys",["^ ","^L",null,"^M",["^ ","^N","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/seqz.cljc","^O",108,"^P",7,"^Q",108,"^R",15,"^S",["^T",["^U",["^T",[["~$f","^V"]]]]],"^W","Returns `zloc` with function `f` applied to all key nodes of the current node.\n   Current node must be map node.\n\n  `zloc` location is unchanged.\n\n  `f` arg is zloc positioned at key node and should return:\n  - an updated zloc with zloc positioned at key node\n  - a falsey value to leave value node unchanged\n\n  Folks typically use [[rewrite-clj.zip/edit]] for `f`."],"^=","~$rewrite-clj.zip.seqz/map-keys","^N","out/rewrite_clj/zip/seqz.cljc","^R",15,"^Y",["^T",[["~$f","^V"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",108,"^11",["^4",[null,"^1:","^1<"]],"^Q",108,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["~$f","^V"]]]]],"^W","Returns `zloc` with function `f` applied to all key nodes of the current node.\n   Current node must be map node.\n\n  `zloc` location is unchanged.\n\n  `f` arg is zloc positioned at key node and should return:\n  - an updated zloc with zloc positioned at key node\n  - a falsey value to leave value node unchanged\n\n  Folks typically use [[rewrite-clj.zip/edit]] for `f`."],"~$namespaced-map?",["^ ","^L",null,"^M",["^ ","^N","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/seqz.cljc","^O",41,"^P",7,"^Q",41,"^R",22,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","Returns true if the current node in `zloc` is a namespaced map."],"^=","~$rewrite-clj.zip.seqz/namespaced-map?","^N","out/rewrite_clj/zip/seqz.cljc","^R",22,"^Y",["^T",[["^V"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",41,"^11","^12","^Q",41,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","Returns true if the current node in `zloc` is a namespaced map."],"~$map-vals",["^ ","^L",null,"^M",["^ ","^N","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/seqz.cljc","^O",83,"^P",7,"^Q",83,"^R",15,"^S",["^T",["^U",["^T",[["~$f","^V"]]]]],"^W","Returns `zloc` with function `f` applied to each value node of the current node.\n   Current node must be map node.\n\n  `zloc` location is unchanged.\n\n  `f` arg is zloc positioned at value node and should return:\n  - an updated zloc with zloc positioned at value node\n  - a falsey value to leave value node unchanged\n\n  Folks typically use [[edit]] for `f`."],"^=","~$rewrite-clj.zip.seqz/map-vals","^N","out/rewrite_clj/zip/seqz.cljc","^R",15,"^Y",["^T",[["~$f","^V"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",83,"^11",["^4",[null,"^1:","^1<"]],"^Q",83,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["~$f","^V"]]]]],"^W","Returns `zloc` with function `f` applied to each value node of the current node.\n   Current node must be map node.\n\n  `zloc` location is unchanged.\n\n  `f` arg is zloc positioned at value node and should return:\n  - an updated zloc with zloc positioned at value node\n  - a falsey value to leave value node unchanged\n\n  Folks typically use [[edit]] for `f`."],"^;",["^ ","^L",null,"^M",["^ ","^N","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/seqz.cljc","^O",21,"^P",7,"^Q",21,"^R",12,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","Returns true if current node in `zloc` is a list."],"^=","~$rewrite-clj.zip.seqz/list?","^N","out/rewrite_clj/zip/seqz.cljc","^R",12,"^Y",["^T",[["^V"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",21,"^11","^12","^Q",21,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","Returns true if current node in `zloc` is a list."],"^<",["^ ","^L",null,"^M",["^ ","^N","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/seqz.cljc","^O",171,"^P",7,"^Q",171,"^R",12,"^S",["^T",["^U",["^T",[["^V","~$k","~$v"]]]]],"^W","Returns `zloc` with current node's `k` set to value `v`.\n\n  `zloc` location is unchanged.\n\n  `k` should be:\n  - a key for maps\n  - a zero-based index for sequences, an exception is thrown if index is out of bounds\n\n  NOTE: `k` will be compared against resolved keywords in maps.\n  See docs for sexpr behavior on [namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)."],"^=","~$rewrite-clj.zip.seqz/assoc","^N","out/rewrite_clj/zip/seqz.cljc","^R",12,"^Y",["^T",[["^V","~$k","~$v"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",171,"^11",["^4",[null,"^1:","^1<"]],"^Q",171,"^13",3,"^14",true,"^S",["^T",["^U",["^T",[["^V","~$k","~$v"]]]]],"^W","Returns `zloc` with current node's `k` set to value `v`.\n\n  `zloc` location is unchanged.\n\n  `k` should be:\n  - a key for maps\n  - a zero-based index for sequences, an exception is thrown if index is out of bounds\n\n  NOTE: `k` will be compared against resolved keywords in maps.\n  See docs for sexpr behavior on [namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)."],"^18",["^ ","^L",null,"^M",["^ ","^N","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/seqz.cljc","^O",73,"^P",8,"^Q",73,"^R",15,"^17",true,"^S",["^T",["^U",["^T",[["^V"]]]]]],"^17",true,"^=","~$rewrite-clj.zip.seqz/map-loc","^N","out/rewrite_clj/zip/seqz.cljc","^R",15,"^Y",["^T",[["^V"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",73,"^11",["^4",[null,"^1:","^1<"]],"^Q",73,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["^V"]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:namespaced-map","~:else","~:vector","~:list","~:set","~:map","~:forms"]],"~:order",["^1S","^1U","^1V","^1W","^1X","^1Y","^1T"]],"^W",null,"~:as-aliases",["^ "]]
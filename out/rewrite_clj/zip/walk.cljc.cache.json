["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$rewrite-clj.zip.walk","~:imports",null,"~:requires",["^ ","~$m","~$rewrite-clj.zip.move","^9","^9","~$subedit","~$rewrite-clj.zip.subedit","^;","^;"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$downmost",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/walk.cljc","~:line",7,"~:column",8,"~:end-line",7,"~:end-column",16,"~:private",true,"~:arglists",["~#list",["~$quote",["^I",[["~$zloc"]]]]]],"^G",true,"^5","~$rewrite-clj.zip.walk/downmost","^B","out/rewrite_clj/zip/walk.cljc","^F",16,"~:method-params",["^I",[["^K"]]],"~:protocol-impl",null,"~:arglists-meta",["^I",[null,null]],"^D",1,"~:variadic?",false,"^C",7,"~:ret-tag",["^4",["~$any","~$clj-nil"]],"^E",7,"~:max-fixed-arity",1,"~:fn-var",true,"^H",["^I",["^J",["^I",[["^K"]]]]]],"~$process-loc",["^ ","^@",null,"^A",["^ ","^B","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/walk.cljc","^C",12,"^D",8,"^E",12,"^F",19,"^G",true,"^H",["^I",["^J",["^I",[["^K","~$p?","~$f"]]]]]],"^G",true,"^5","~$rewrite-clj.zip.walk/process-loc","^B","out/rewrite_clj/zip/walk.cljc","^F",19,"^M",["^I",[["^K","^W","~$f"]]],"^N",null,"^O",["^I",[null,null]],"^D",1,"^P",false,"^C",12,"^Q",["^4",[null,"^R"]],"^E",12,"^T",3,"^U",true,"^H",["^I",["^J",["^I",[["^K","^W","~$f"]]]]]],"~$prewalk-subtree",["^ ","^@",null,"^A",["^ ","^B","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/walk.cljc","^C",17,"^D",8,"^E",17,"^F",23,"^G",true,"^H",["^I",["^J",["^I",[["^W","~$f","^K"]]]]]],"^G",true,"^5","~$rewrite-clj.zip.walk/prewalk-subtree","^B","out/rewrite_clj/zip/walk.cljc","^F",23,"^M",["^I",[["^W","~$f","^K"]]],"^N",null,"^O",["^I",[null,null]],"^D",1,"^P",false,"^C",17,"^E",17,"^T",3,"^U",true,"^H",["^I",["^J",["^I",[["^W","~$f","^K"]]]]]],"~$prewalk",["^ ","^@",null,"^A",["^ ","^B","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/walk.cljc","^C",26,"^D",7,"^E",26,"^F",14,"^H",["^I",["^J",["^I",[["^K","~$f"],["^K","^W","~$f"]]]]],"~:doc","Return zipper modified by an isolated depth-first pre-order traversal.\n\n   Pre-order traversal visits root before children.\n   For example, traversal order of `(1 (2 3 (4 5) 6 (7 8)) 9)` is:\n\n   1. `(1 (2 3 (4 5) 6 (7 8)) 9)`\n   2. `1`\n   3. `(2 3 (4 5) 6 (7 8))`\n   4. `2`\n   5. `3`\n   6. `(4 5)`\n   7. `4`\n   8. `5`\n   9. `6`\n   10. `(7 8)`\n   11. `7`\n   12. `8`\n   13. `9`\n\n   Traversal starts at the current node in `zloc` and continues to the end of the isolated sub-tree.\n\n   Function `f` is called on the zipper locations satisfying predicate `p?` and must return either\n   - nil to indicate no changes\n   - or a valid zipper\n   WARNING: when function `f` changes the location in the zipper, normal traversal will be affected.\n\n   When `p?` is not specified `f` is called on all locations.\n\n   Note that by default a newly created zipper automatically navigates to the first non-whitespace\n   node. If you want to be sure to walk all forms in a zipper, you'll want to navigate one up prior to your walk:\n\n   ```Clojure\n   (-> (zip/of-string \"my clojure forms\")\n       zip/up\n       (zip/prewalk ...))\n   ```\n\n   See [docs on sub editing](/doc/01-user-guide.adoc#sub-editing).","~:top-fn",["^ ","^P",false,"~:fixed-arity",3,"^T",3,"^M",[["^K","~$f"],["^K","^W","~$f"]],"^H",["^I",[["^K","~$f"],["^K","^W","~$f"]]],"^O",["^I",[null,null]]]],"^5","~$rewrite-clj.zip.walk/prewalk","^B","out/rewrite_clj/zip/walk.cljc","^F",14,"^11",["^ ","^P",false,"^12",3,"^T",3,"^M",[["^K","~$f"],["^K","^W","~$f"]],"^H",["^I",[["^K","~$f"],["^K","^W","~$f"]]],"^O",["^I",[null,null]]],"^M",[["^K","~$f"],["^K","^W","~$f"]],"^N",null,"^12",3,"^O",["^I",[null,null]],"^D",1,"^P",false,"~:methods",[["^ ","^12",2,"^P",false,"~:tag","^R"],["^ ","^12",3,"^P",false,"^15",["^4",["~$clj","^R","~$cljs.core/MetaFn","^S"]]]],"^C",26,"^E",26,"^T",3,"^U",true,"^H",["^I",[["^K","~$f"],["^K","^W","~$f"]]],"^10","Return zipper modified by an isolated depth-first pre-order traversal.\n\n   Pre-order traversal visits root before children.\n   For example, traversal order of `(1 (2 3 (4 5) 6 (7 8)) 9)` is:\n\n   1. `(1 (2 3 (4 5) 6 (7 8)) 9)`\n   2. `1`\n   3. `(2 3 (4 5) 6 (7 8))`\n   4. `2`\n   5. `3`\n   6. `(4 5)`\n   7. `4`\n   8. `5`\n   9. `6`\n   10. `(7 8)`\n   11. `7`\n   12. `8`\n   13. `9`\n\n   Traversal starts at the current node in `zloc` and continues to the end of the isolated sub-tree.\n\n   Function `f` is called on the zipper locations satisfying predicate `p?` and must return either\n   - nil to indicate no changes\n   - or a valid zipper\n   WARNING: when function `f` changes the location in the zipper, normal traversal will be affected.\n\n   When `p?` is not specified `f` is called on all locations.\n\n   Note that by default a newly created zipper automatically navigates to the first non-whitespace\n   node. If you want to be sure to walk all forms in a zipper, you'll want to navigate one up prior to your walk:\n\n   ```Clojure\n   (-> (zip/of-string \"my clojure forms\")\n       zip/up\n       (zip/prewalk ...))\n   ```\n\n   See [docs on sub editing](/doc/01-user-guide.adoc#sub-editing)."],"~$postwalk-subtree",["^ ","^@",null,"^A",["^ ","^B","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/walk.cljc","^C",70,"^D",7,"^E",70,"^F",23,"^H",["^I",["^J",["^I",[["^W","~$f","^K"]]]]]],"^5","~$rewrite-clj.zip.walk/postwalk-subtree","^B","out/rewrite_clj/zip/walk.cljc","^F",23,"^M",["^I",[["^W","~$f","^K"]]],"^N",null,"^O",["^I",[null,null]],"^D",1,"^P",false,"^C",70,"^Q",["^4",[null,"^R"]],"^E",70,"^T",3,"^U",true,"^H",["^I",["^J",["^I",[["^W","~$f","^K"]]]]]],"~$postwalk",["^ ","^@",null,"^A",["^ ","^B","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/walk.cljc","^C",83,"^D",7,"^E",83,"^F",15,"^H",["^I",["^J",["^I",[["^K","~$f"],["^K","^W","~$f"]]]]],"^10","Return zipper modified by an isolated depth-first post-order traversal.\n\n   Pre-order traversal visits children before root.\n   For example, traversal order of `(1 (2 3 (4 5) 6 (7 8)) 9)` is:\n\n   1. `1`\n   2. `2`\n   3. `3`\n   4. `4`\n   5. `5`\n   6. `(4 5)`\n   7. `6`\n   8. `7`\n   9. `8`\n   10. `(7 8)`\n   11. `(2 3 (4 5) 6 (7 8))`\n   12. `9`\n   13. `(1 (2 3 (4 5) 6 (7 8)) 9)`\n\n   Traversal starts at the current node in `zloc` and continues to the end of the isolated sub-tree.\n\n   Function `f` is called on the zipper locations satisfying predicate `p?` and must return either\n   - nil to indicate no changes\n   - or a valid zipper\n   WARNING: when function `f` changes the location in the zipper, normal traversal will be affected.\n\n   When `p?` is not specified `f` is called on all locations.\n\n   Note that by default a newly created zipper automatically navigates to the first non-whitespace\n   node. If you want to be sure to walk all forms in a zipper, you'll want to navigate one up prior to your walk:\n\n   ```Clojure\n   (-> (zip/of-string \"my clojure forms\")\n       zip/up\n       (zip/postwalk ...))\n   ```\n\n   See [docs on sub editing](/doc/01-user-guide.adoc#sub-editing).","^11",["^ ","^P",false,"^12",3,"^T",3,"^M",[["^K","~$f"],["^K","^W","~$f"]],"^H",["^I",[["^K","~$f"],["^K","^W","~$f"]]],"^O",["^I",[null,null]]]],"^5","~$rewrite-clj.zip.walk/postwalk","^B","out/rewrite_clj/zip/walk.cljc","^F",15,"^11",["^ ","^P",false,"^12",3,"^T",3,"^M",[["^K","~$f"],["^K","^W","~$f"]],"^H",["^I",[["^K","~$f"],["^K","^W","~$f"]]],"^O",["^I",[null,null]]],"^M",[["^K","~$f"],["^K","^W","~$f"]],"^N",null,"^12",3,"^O",["^I",[null,null]],"^D",1,"^P",false,"^14",[["^ ","^12",2,"^P",false,"^15","^R"],["^ ","^12",3,"^P",false,"^15",["^4",["^16","^R","^17","^S"]]]],"^C",83,"^E",83,"^T",3,"^U",true,"^H",["^I",[["^K","~$f"],["^K","^W","~$f"]]],"^10","Return zipper modified by an isolated depth-first post-order traversal.\n\n   Pre-order traversal visits children before root.\n   For example, traversal order of `(1 (2 3 (4 5) 6 (7 8)) 9)` is:\n\n   1. `1`\n   2. `2`\n   3. `3`\n   4. `4`\n   5. `5`\n   6. `(4 5)`\n   7. `6`\n   8. `7`\n   9. `8`\n   10. `(7 8)`\n   11. `(2 3 (4 5) 6 (7 8))`\n   12. `9`\n   13. `(1 (2 3 (4 5) 6 (7 8)) 9)`\n\n   Traversal starts at the current node in `zloc` and continues to the end of the isolated sub-tree.\n\n   Function `f` is called on the zipper locations satisfying predicate `p?` and must return either\n   - nil to indicate no changes\n   - or a valid zipper\n   WARNING: when function `f` changes the location in the zipper, normal traversal will be affected.\n\n   When `p?` is not specified `f` is called on all locations.\n\n   Note that by default a newly created zipper automatically navigates to the first non-whitespace\n   node. If you want to be sure to walk all forms in a zipper, you'll want to navigate one up prior to your walk:\n\n   ```Clojure\n   (-> (zip/of-string \"my clojure forms\")\n       zip/up\n       (zip/postwalk ...))\n   ```\n\n   See [docs on sub editing](/doc/01-user-guide.adoc#sub-editing)."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^:","^;","^;","^;"],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:else"]],"~:order",["^1@"]],"^10",null,"~:as-aliases",["^ "]]
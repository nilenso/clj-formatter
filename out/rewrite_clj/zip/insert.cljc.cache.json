["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$rewrite-clj.zip.insert","~:imports",null,"~:requires",["^ ","~$zraw","~$rewrite-clj.custom-zipper.core","^:","^:","~$node","~$rewrite-clj.node.protocols","^<","^<","~$nwhitespace","~$rewrite-clj.node.whitespace","^>","^>","~$zwhitespace","~$rewrite-clj.zip.whitespace","^@","^@"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$space",["^ ","~:meta",["^ ","~:file","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/insert.cljc","~:line",9,"~:column",16,"~:end-line",9,"~:end-column",21,"~:private",true],"^K",true,"^5","~$rewrite-clj.zip.insert/space","^F","out/rewrite_clj/zip/insert.cljc","^J",21,"^H",1,"^G",9,"^I",9,"~:tag","~$rewrite-clj.node.whitespace/WhitespaceNode"],"~$insert",["^ ","~:protocol-inline",null,"^E",["^ ","^F","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/insert.cljc","^G",12,"^H",8,"^I",12,"^J",14,"^K",true,"~:arglists",["~#list",["~$quote",["^R",[["~$move-fn","~$insert-fn","~$prefix","~$zloc","~$item"]]]]],"~:doc","Generic insertion helper. If the node reached by `move-fn`\n   is a whitespace, insert an additional space."],"^K",true,"^5","~$rewrite-clj.zip.insert/insert","^F","out/rewrite_clj/zip/insert.cljc","^J",14,"~:method-params",["^R",[["^T","^U","^V","^W","^X"]]],"~:protocol-impl",null,"~:arglists-meta",["^R",[null,null]],"^H",1,"~:variadic?",false,"^G",12,"~:ret-tag",["^4",[null,"~$any"]],"^I",12,"~:max-fixed-arity",5,"~:fn-var",true,"^Q",["^R",["^S",["^R",[["^T","^U","^V","^W","^X"]]]]],"^Y","Generic insertion helper. If the node reached by `move-fn`\n   is a whitespace, insert an additional space."],"~$insert-right",["^ ","^P",null,"^E",["^ ","^F","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/insert.cljc","^G",26,"^H",7,"^I",26,"^J",19,"^Q",["^R",["^S",["^R",[["^W","^X"]]]]],"^Y","Return zipper with `item` inserted to the right of the current node in `zloc`, without moving location.\n  If `item` is not already a node, an attempt will be made to coerce it to one.\n\n  Will insert a space if necessary.\n\n  Use [[rewrite-clj.zip/insert-right*]] to insert without adding any whitespace."],"^5","~$rewrite-clj.zip.insert/insert-right","^F","out/rewrite_clj/zip/insert.cljc","^J",19,"^[",["^R",[["^W","^X"]]],"^10",null,"^11",["^R",[null,null]],"^H",1,"^12",false,"^G",26,"^13",["^4",[null,"^14"]],"^I",26,"^15",2,"^16",true,"^Q",["^R",["^S",["^R",[["^W","^X"]]]]],"^Y","Return zipper with `item` inserted to the right of the current node in `zloc`, without moving location.\n  If `item` is not already a node, an attempt will be made to coerce it to one.\n\n  Will insert a space if necessary.\n\n  Use [[rewrite-clj.zip/insert-right*]] to insert without adding any whitespace."],"~$insert-left",["^ ","^P",null,"^E",["^ ","^F","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/insert.cljc","^G",40,"^H",7,"^I",40,"^J",18,"^Q",["^R",["^S",["^R",[["^W","^X"]]]]],"^Y","Return zipper with `item` inserted to the left of the current node in `zloc`, without moving location.\n  Will insert a space if necessary.\n  If `item` is not already a node, an attempt will be made to coerce it to one.\n\n  Use [[insert-left*]] to insert without adding any whitespace."],"^5","~$rewrite-clj.zip.insert/insert-left","^F","out/rewrite_clj/zip/insert.cljc","^J",18,"^[",["^R",[["^W","^X"]]],"^10",null,"^11",["^R",[null,null]],"^H",1,"^12",false,"^G",40,"^13",["^4",[null,"^14"]],"^I",40,"^15",2,"^16",true,"^Q",["^R",["^S",["^R",[["^W","^X"]]]]],"^Y","Return zipper with `item` inserted to the left of the current node in `zloc`, without moving location.\n  Will insert a space if necessary.\n  If `item` is not already a node, an attempt will be made to coerce it to one.\n\n  Use [[insert-left*]] to insert without adding any whitespace."],"~$insert-child",["^ ","^P",null,"^E",["^ ","^F","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/insert.cljc","^G",53,"^H",7,"^I",53,"^J",19,"^Q",["^R",["^S",["^R",[["^W","^X"]]]]],"^Y","Return zipper with `item` inserted as the first child of the current node in `zloc`, without moving location.\n  Will insert a space if necessary.\n  If `item` is not already a node, an attempt will be made to coerce it to one.\n\n  Use [[insert-child*]] to insert without adding any whitespace."],"^5","~$rewrite-clj.zip.insert/insert-child","^F","out/rewrite_clj/zip/insert.cljc","^J",19,"^[",["^R",[["^W","^X"]]],"^10",null,"^11",["^R",[null,null]],"^H",1,"^12",false,"^G",53,"^13",["^4",[null,"^14"]],"^I",53,"^15",2,"^16",true,"^Q",["^R",["^S",["^R",[["^W","^X"]]]]],"^Y","Return zipper with `item` inserted as the first child of the current node in `zloc`, without moving location.\n  Will insert a space if necessary.\n  If `item` is not already a node, an attempt will be made to coerce it to one.\n\n  Use [[insert-child*]] to insert without adding any whitespace."],"~$append-child",["^ ","^P",null,"^E",["^ ","^F","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/insert.cljc","^G",66,"^H",7,"^I",66,"^J",19,"^Q",["^R",["^S",["^R",[["^W","^X"]]]]],"^Y","Return zipper with `item` inserted as the last child of the current node in `zloc`, without moving.\n  Will insert a space if necessary.\n  If `item` is not already a node, an attempt will be made to coerce it to one.\n\n  Use [[append-child*]] to append without adding any whitespace."],"^5","~$rewrite-clj.zip.insert/append-child","^F","out/rewrite_clj/zip/insert.cljc","^J",19,"^[",["^R",[["^W","^X"]]],"^10",null,"^11",["^R",[null,null]],"^H",1,"^12",false,"^G",66,"^13",["^4",[null,"^14"]],"^I",66,"^15",2,"^16",true,"^Q",["^R",["^S",["^R",[["^W","^X"]]]]],"^Y","Return zipper with `item` inserted as the last child of the current node in `zloc`, without moving.\n  Will insert a space if necessary.\n  If `item` is not already a node, an attempt will be made to coerce it to one.\n\n  Use [[append-child*]] to append without adding any whitespace."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^=","^>","^>","^>"],"^Y",null,"~:as-aliases",["^ "]]
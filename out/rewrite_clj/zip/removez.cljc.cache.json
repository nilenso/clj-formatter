["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$remove"]],"~:name","~$rewrite-clj.zip.removez","~:imports",null,"~:requires",["^ ","~$zraw","~$rewrite-clj.custom-zipper.core","^;","^;","~$u","~$rewrite-clj.custom-zipper.utils","^<","^<","~$m","~$rewrite-clj.zip.move","^=","^=","~$ws","~$rewrite-clj.zip.whitespace","^?","^?"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$node-depth",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/removez.cljc","~:line",10,"~:column",8,"~:end-line",10,"~:end-column",18,"~:private",true,"~:arglists",["~#list",["~$quote",["^M",[["~$zloc"]]]]],"~:doc","Return current node location depth in `zloc`, top is 0."],"^K",true,"^6","~$rewrite-clj.zip.removez/node-depth","^F","out/rewrite_clj/zip/removez.cljc","^J",18,"~:method-params",["^M",[["^O"]]],"~:protocol-impl",null,"~:arglists-meta",["^M",[null,null]],"^H",1,"~:variadic?",false,"^G",10,"~:ret-tag","~$number","^I",10,"~:max-fixed-arity",1,"~:fn-var",true,"^L",["^M",["^N",["^M",[["^O"]]]]],"^P","Return current node location depth in `zloc`, top is 0."],"~$has-trailing-linebreak-at-eoi?",["^ ","^D",null,"^E",["^ ","^F","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/removez.cljc","^G",18,"^H",8,"^I",18,"^J",38,"^K",true,"^L",["^M",["^N",["^M",[["^O"]]]]],"^P","Returns true when current node is last node in zipper and trailing whitespace contains\n  at least 1 newline."],"^K",true,"^6","~$rewrite-clj.zip.removez/has-trailing-linebreak-at-eoi?","^F","out/rewrite_clj/zip/removez.cljc","^J",38,"^R",["^M",[["^O"]]],"^S",null,"^T",["^M",[null,null]],"^H",1,"^U",false,"^G",18,"^V",["^4",["~$boolean","~$any","~$clj-nil"]],"^I",18,"^X",1,"^Y",true,"^L",["^M",["^N",["^M",[["^O"]]]]],"^P","Returns true when current node is last node in zipper and trailing whitespace contains\n  at least 1 newline."],"~$left-ws-trim",["^ ","^D",null,"^E",["^ ","^F","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/removez.cljc","^G",28,"^H",8,"^I",28,"^J",20,"^K",true,"^L",["^M",["^N",["^M",[["^O"],["^O","~$p?"]]]]],"~:top-fn",["^ ","^U",false,"~:fixed-arity",2,"^X",2,"^R",[["^O"],["^O","^14"]],"^L",["^M",[["^O"],["^O","^14"]]],"^T",["^M",[null,null]]]],"^K",true,"^6","~$rewrite-clj.zip.removez/left-ws-trim","^F","out/rewrite_clj/zip/removez.cljc","^J",20,"^15",["^ ","^U",false,"^16",2,"^X",2,"^R",[["^O"],["^O","^14"]],"^L",["^M",[["^O"],["^O","^14"]]],"^T",["^M",[null,null]]],"^R",[["^O"],["^O","^14"]],"^S",null,"^16",2,"^T",["^M",[null,null]],"^H",1,"^U",false,"~:methods",[["^ ","^16",1,"^U",false,"~:tag","^11"],["^ ","^16",2,"^U",false,"^19",["^4",[null,"^11"]]]],"^G",28,"^I",28,"^X",2,"^Y",true,"^L",["^M",[["^O"],["^O","^14"]]]],"~$right-ws-trim",["^ ","^D",null,"^E",["^ ","^F","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/removez.cljc","^G",37,"^H",8,"^I",37,"^J",21,"^K",true,"^L",["^M",["^N",["^M",[["^O"],["^O","^14"]]]]],"^15",["^ ","^U",false,"^16",2,"^X",2,"^R",[["^O"],["^O","^14"]],"^L",["^M",[["^O"],["^O","^14"]]],"^T",["^M",[null,null]]]],"^K",true,"^6","~$rewrite-clj.zip.removez/right-ws-trim","^F","out/rewrite_clj/zip/removez.cljc","^J",21,"^15",["^ ","^U",false,"^16",2,"^X",2,"^R",[["^O"],["^O","^14"]],"^L",["^M",[["^O"],["^O","^14"]]],"^T",["^M",[null,null]]],"^R",[["^O"],["^O","^14"]],"^S",null,"^16",2,"^T",["^M",[null,null]],"^H",1,"^U",false,"^18",[["^ ","^16",1,"^U",false,"^19","^11"],["^ ","^16",2,"^U",false,"^19","^11"]],"^G",37,"^I",37,"^X",2,"^Y",true,"^L",["^M",[["^O"],["^O","^14"]]]],"~$right-ws-trim-keep-trailing-linebreak",["^ ","^D",null,"^E",["^ ","^F","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/removez.cljc","^G",43,"^H",8,"^I",43,"^J",45,"^K",true,"^L",["^M",["^N",["^M",[["^O"]]]]]],"^K",true,"^6","~$rewrite-clj.zip.removez/right-ws-trim-keep-trailing-linebreak","^F","out/rewrite_clj/zip/removez.cljc","^J",45,"^R",["^M",[["^O"]]],"^S",null,"^T",["^M",[null,null]],"^H",1,"^U",false,"^G",43,"^V","^11","^I",43,"^X",1,"^Y",true,"^L",["^M",["^N",["^M",[["^O"]]]]]],"~$remove-with-trim",["^ ","^D",null,"^E",["^ ","^F","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/removez.cljc","^G",49,"^H",8,"^I",49,"^J",24,"^K",true,"^L",["^M",["^N",["^M",[["^O","~$left-ws-trim-fn","~$right-ws-trim-fn"]]]]]],"^K",true,"^6","~$rewrite-clj.zip.removez/remove-with-trim","^F","out/rewrite_clj/zip/removez.cljc","^J",24,"^R",["^M",[["^O","^1?","^1@"]]],"^S",null,"^T",["^M",[null,null]],"^H",1,"^U",false,"^G",49,"^V",["^4",["^11","^12"]],"^I",49,"^X",3,"^Y",true,"^L",["^M",["^N",["^M",[["^O","^1?","^1@"]]]]]],"^5",["^ ","^D",null,"^E",["^ ","^F","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/removez.cljc","^G",57,"^H",7,"^I",57,"^J",13,"^L",["^M",["^N",["^M",[["^O"]]]]],"^P","Return `zloc` with current node removed. Returned zipper location\n   is moved to the first non-whitespace node preceding removed node in a depth-first walk.\n   Removes whitespace appropriately.\n\n  - `[1 |2  3]    => [|1 3]`\n  - `[1 |2]       => [|1]`\n  - `[|1 2]       => |[2]`\n  - `[|1]         => |[]`\n  - `[  |1  ]     => |[]`\n  - `[1 [2 3] |4] => [1 [2 |3]]`\n  - `[|1 [2 3] 4] => |[[2 3] 4]`\n\n   If the removed node is a rightmost sibling, both leading and trailing whitespace\n   is removed, otherwise only trailing whitespace is removed.\n\n   The result is that a following element (no matter whether it is on the same line\n   or not) will end up at same positon (line/column) as the removed one.\n   If a comment lies betwen the original node and the neighbour this will not hold true.\n\n   If the removed node is at end of input and is trailed by 1 or more newlines,\n   a single trailing newline will be preserved.\n\n   Use [[remove*]] to remove node without removing any surrounding whitespace."],"^6","~$rewrite-clj.zip.removez/remove","^F","out/rewrite_clj/zip/removez.cljc","^J",13,"^R",["^M",[["^O"]]],"^S",null,"^T",["^M",[null,null]],"^H",1,"^U",false,"^G",57,"^V",["^4",["^11","^12"]],"^I",57,"^X",1,"^Y",true,"^L",["^M",["^N",["^M",[["^O"]]]]],"^P","Return `zloc` with current node removed. Returned zipper location\n   is moved to the first non-whitespace node preceding removed node in a depth-first walk.\n   Removes whitespace appropriately.\n\n  - `[1 |2  3]    => [|1 3]`\n  - `[1 |2]       => [|1]`\n  - `[|1 2]       => |[2]`\n  - `[|1]         => |[]`\n  - `[  |1  ]     => |[]`\n  - `[1 [2 3] |4] => [1 [2 |3]]`\n  - `[|1 [2 3] 4] => |[[2 3] 4]`\n\n   If the removed node is a rightmost sibling, both leading and trailing whitespace\n   is removed, otherwise only trailing whitespace is removed.\n\n   The result is that a following element (no matter whether it is on the same line\n   or not) will end up at same positon (line/column) as the removed one.\n   If a comment lies betwen the original node and the neighbour this will not hold true.\n\n   If the removed node is at end of input and is trailed by 1 or more newlines,\n   a single trailing newline will be preserved.\n\n   Use [[remove*]] to remove node without removing any surrounding whitespace."],"~$remove-preserve-newline",["^ ","^D",null,"^E",["^ ","^F","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/removez.cljc","^G",88,"^H",7,"^I",88,"^J",30,"^L",["^M",["^N",["^M",[["^O"]]]]],"^P","Same as [[remove]] but preserves newlines.\n   Specifically: will trim all whitespace - or whitespace up to first linebreak if present."],"^6","~$rewrite-clj.zip.removez/remove-preserve-newline","^F","out/rewrite_clj/zip/removez.cljc","^J",30,"^R",["^M",[["^O"]]],"^S",null,"^T",["^M",[null,null]],"^H",1,"^U",false,"^G",88,"^V",["^4",["^11","^12"]],"^I",88,"^X",1,"^Y",true,"^L",["^M",["^N",["^M",[["^O"]]]]],"^P","Same as [[remove]] but preserves newlines.\n   Specifically: will trim all whitespace - or whitespace up to first linebreak if present."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"^P",null,"~:as-aliases",["^ "]]
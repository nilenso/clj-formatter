["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$print"]],"~:name","~$rewrite-clj.zip.base","~:imports",null,"~:requires",["^ ","~$options","~$rewrite-clj.zip.options","~$rewrite-clj.parser","^<","~$p","^<","~$rewrite-clj.custom-zipper.core","^=","~$ws","~$rewrite-clj.zip.whitespace","^;","^;","^?","^?","~$node","~$rewrite-clj.node.protocols","^A","^A","~$zraw","^=","~$nforms","~$rewrite-clj.node.forms","^D","^D"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$child-sexprs",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/base.cljc","~:line",79,"~:column",7,"~:end-line",79,"~:end-column",19,"~:arglists",["~#list",["~$quote",["^Q",[["~$zloc"]]]]],"~:doc","Return s-expression (the Clojure forms) of children of current node in `zloc`.\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances)."],"^6","~$rewrite-clj.zip.base/child-sexprs","^K","out/rewrite_clj/zip/base.cljc","^O",19,"~:method-params",["^Q",[["^S"]]],"~:protocol-impl",null,"~:arglists-meta",["^Q",[null,null]],"^M",1,"~:variadic?",false,"^L",79,"~:ret-tag",["^4",["~$cljs.core/LazySeq","~$clj-nil"]],"^N",79,"~:max-fixed-arity",1,"~:fn-var",true,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^T","Return s-expression (the Clojure forms) of children of current node in `zloc`.\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances)."],"~$tag",["^ ","^I",null,"^J",["^ ","^K","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/base.cljc","^L",60,"^M",7,"^N",60,"^O",10,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^T","Return tag of current node in `zloc`."],"^6","~$rewrite-clj.zip.base/tag","^K","out/rewrite_clj/zip/base.cljc","^O",10,"^V",["^Q",[["^S"]]],"^W",null,"^X",["^Q",[null,null]],"^M",1,"^Y",false,"^L",60,"^Z",["^4",["~$any","^10"]],"^N",60,"^11",1,"^12",true,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^T","Return tag of current node in `zloc`."],"~$print!",["^ ","^I",null,"^J",["^ ","^K","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/base.cljc","^L",147,"^M",11,"^N",147,"^O",17,"~:private",true,"^P",["^Q",["^R",["^Q",[["~$s","~$_writer"]]]]]],"^17",true,"^6","~$rewrite-clj.zip.base/print!","^K","out/rewrite_clj/zip/base.cljc","^O",17,"^V",["^Q",[["~$s","^18"]]],"^W",null,"^X",["^Q",[null,null]],"^M",4,"^Y",false,"^L",147,"^Z","^10","^N",147,"^11",2,"^12",true,"^P",["^Q",["^R",["^Q",[["~$s","^18"]]]]]],"~$root-string",["^ ","^I",null,"^J",["^ ","^K","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/base.cljc","^L",131,"^M",7,"^N",131,"^O",18,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^T","Return string representing the zipped-up `zloc` zipper."],"^6","~$rewrite-clj.zip.base/root-string","^K","out/rewrite_clj/zip/base.cljc","^O",18,"^V",["^Q",[["^S"]]],"^W",null,"^X",["^Q",[null,null]],"^M",1,"^Y",false,"^L",131,"^Z",["^4",["^15","^10"]],"^N",131,"^11",1,"^12",true,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^T","Return string representing the zipped-up `zloc` zipper."],"~$->root-string",["^ ","^I",null,"^J",["^ ","^K","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/base.cljc","^L",136,"^M",7,"^N",136,"^O",20,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^T","DEPRECATED. Renamed to [[root-string]]."],"^6","~$rewrite-clj.zip.base/->root-string","^K","out/rewrite_clj/zip/base.cljc","^O",20,"^V",["^Q",[["^S"]]],"^W",null,"^X",["^Q",[null,null]],"^M",1,"^Y",false,"^L",136,"^Z",["^4",["^15","^10"]],"^N",136,"^11",1,"^12",true,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^T","DEPRECATED. Renamed to [[root-string]]."],"~$sexpr-able?",["^ ","^I",null,"^J",["^ ","^K","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/base.cljc","^L",65,"^M",7,"^N",65,"^O",18,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^T","Return true if current node's element type in `zloc` can be [[sexpr]]-ed.\n\n   See [related docs in user guide](/doc/01-user-guide.adoc#not-all-clojure-is-sexpr-able)"],"^6","~$rewrite-clj.zip.base/sexpr-able?","^K","out/rewrite_clj/zip/base.cljc","^O",18,"^V",["^Q",[["^S"]]],"^W",null,"^X",["^Q",[null,null]],"^M",1,"^Y",false,"^L",65,"^Z",["^4",["~$boolean","^10"]],"^N",65,"^11",1,"^12",true,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^T","Return true if current node's element type in `zloc` can be [[sexpr]]-ed.\n\n   See [related docs in user guide](/doc/01-user-guide.adoc#not-all-clojure-is-sexpr-able)"],"~$sexpr",["^ ","^I",null,"^J",["^ ","^K","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/base.cljc","^L",72,"^M",7,"^N",72,"^O",12,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^T","Return s-expression (the Clojure form) of current node in `zloc`.\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances)."],"^6","~$rewrite-clj.zip.base/sexpr","^K","out/rewrite_clj/zip/base.cljc","^O",12,"^V",["^Q",[["^S"]]],"^W",null,"^X",["^Q",[null,null]],"^M",1,"^Y",false,"^L",72,"^Z",["^4",["^15","^10"]],"^N",72,"^11",1,"^12",true,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^T","Return s-expression (the Clojure form) of current node in `zloc`.\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances)."],"~$value",["^ ","^I",null,"^J",["^ ","^K","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/base.cljc","^L",91,"^M",7,"^N",91,"^O",12,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^T","DEPRECATED. Return a tag/s-expression pair for inner nodes, or\n   the s-expression itself for leaves."],"^6","~$rewrite-clj.zip.base/value","^K","out/rewrite_clj/zip/base.cljc","^O",12,"^V",["^Q",[["^S"]]],"^W",null,"^X",["^Q",[null,null]],"^M",1,"^Y",false,"^L",91,"^Z",["^4",["^15","^10"]],"^N",91,"^11",1,"^12",true,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^T","DEPRECATED. Return a tag/s-expression pair for inner nodes, or\n   the s-expression itself for leaves."],"~$edn*",["^ ","^I",null,"^J",["^ ","^K","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/base.cljc","^L",45,"^M",7,"^N",45,"^O",11,"^P",["^Q",["^R",["^Q",[["^@"],["^@","~$opts"]]]]],"^T","DEPRECATED. Renamed to [[of-node*]].","~:top-fn",["^ ","^Y",false,"~:fixed-arity",2,"^11",2,"^V",[["^@"],["^@","^1F"]],"^P",["^Q",[["^@"],["^@","^1F"]]],"^X",["^Q",[null,null]]]],"^6","~$rewrite-clj.zip.base/edn*","^K","out/rewrite_clj/zip/base.cljc","^O",11,"^1G",["^ ","^Y",false,"^1H",2,"^11",2,"^V",[["^@"],["^@","^1F"]],"^P",["^Q",[["^@"],["^@","^1F"]]],"^X",["^Q",[null,null]]],"^V",[["^@"],["^@","^1F"]],"^W",null,"^1H",2,"^X",["^Q",[null,null]],"^M",1,"^Y",false,"~:methods",[["^ ","^1H",1,"^Y",false,"~:tag","^15"],["^ ","^1H",2,"^Y",false,"^1K",["^4",["~$clj","~$cljs.core/MetaFn","^10"]]]],"^L",45,"^N",45,"^11",2,"^12",true,"^P",["^Q",[["^@"],["^@","^1F"]]],"^T","DEPRECATED. Renamed to [[of-node*]]."],"~$of-node*",["^ ","^I",null,"^J",["^ ","^K","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/base.cljc","^L",14,"^M",7,"^N",14,"^O",15,"^P",["^Q",["^R",["^Q",[["^@"],["^@","^1F"]]]]],"^T","Create and return zipper from a rewrite-clj `node` (likely parsed by [[rewrite-clj.parser]]).\n\n  Optional `opts` can specify:\n  - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)","^1G",["^ ","^Y",false,"^1H",2,"^11",2,"^V",[["^@"],["^@","^1F"]],"^P",["^Q",[["^@"],["^@","^1F"]]],"^X",["^Q",[null,null]]]],"^6","~$rewrite-clj.zip.base/of-node*","^K","out/rewrite_clj/zip/base.cljc","^O",15,"^1G",["^ ","^Y",false,"^1H",2,"^11",2,"^V",[["^@"],["^@","^1F"]],"^P",["^Q",[["^@"],["^@","^1F"]]],"^X",["^Q",[null,null]]],"^V",[["^@"],["^@","^1F"]],"^W",null,"^1H",2,"^X",["^Q",[null,null]],"^M",1,"^Y",false,"^1J",[["^ ","^1H",1,"^Y",false,"^1K","^15"],["^ ","^1H",2,"^Y",false,"^1K",["^4",["^1L","^1M","^10"]]]],"^L",14,"^N",14,"^11",2,"^12",true,"^P",["^Q",[["^@"],["^@","^1F"]]],"^T","Create and return zipper from a rewrite-clj `node` (likely parsed by [[rewrite-clj.parser]]).\n\n  Optional `opts` can specify:\n  - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)"],"~$->string",["^ ","^I",null,"^J",["^ ","^K","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/base.cljc","^L",126,"^M",7,"^N",126,"^O",15,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^T","DEPRECATED. Renamed to [[string]]."],"^6","~$rewrite-clj.zip.base/->string","^K","out/rewrite_clj/zip/base.cljc","^O",15,"^V",["^Q",[["^S"]]],"^W",null,"^X",["^Q",[null,null]],"^M",1,"^Y",false,"^L",126,"^Z",["^4",["^15","^10"]],"^N",126,"^11",1,"^12",true,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^T","DEPRECATED. Renamed to [[string]]."],"~$print-root",["^ ","^I",null,"^J",["^ ","^K","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/base.cljc","^L",160,"^M",7,"^N",160,"^O",17,"^P",["^Q",["^R",["^Q",[["^S","~$writer"],["^S"]]]]],"^T","Zip up and print `zloc` from root node.\n\n   NOTE: Optional `writer` is currently ignored for ClojureScript.","^1G",["^ ","^Y",false,"^1H",2,"^11",2,"^V",[["^S","^1S"],["^S"]],"^P",["^Q",[["^S","^1S"],["^S"]]],"^X",["^Q",[null,null]]]],"^6","~$rewrite-clj.zip.base/print-root","^K","out/rewrite_clj/zip/base.cljc","^O",17,"^1G",["^ ","^Y",false,"^1H",2,"^11",2,"^V",[["^S","^1S"],["^S"]],"^P",["^Q",[["^S","^1S"],["^S"]]],"^X",["^Q",[null,null]]],"^V",[["^S","^1S"],["^S"]],"^W",null,"^1H",2,"^X",["^Q",[null,null]],"^M",1,"^Y",false,"^1J",[["^ ","^1H",2,"^Y",false,"^1K","^10"],["^ ","^1H",1,"^Y",false,"^1K","^10"]],"^L",160,"^N",160,"^11",2,"^12",true,"^P",["^Q",[["^S","^1S"],["^S"]]],"^T","Zip up and print `zloc` from root node.\n\n   NOTE: Optional `writer` is currently ignored for ClojureScript."],"^5",["^ ","^I",null,"^J",["^ ","^K","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/base.cljc","^L",150,"^M",7,"^N",150,"^O",12,"^P",["^Q",["^R",["^Q",[["^S","^1S"],["^S"]]]]],"^T","Print current node in `zloc`.\n\n   NOTE: Optional `writer` is currently ignored for ClojureScript.","^1G",["^ ","^Y",false,"^1H",2,"^11",2,"^V",[["^S","^1S"],["^S"]],"^P",["^Q",[["^S","^1S"],["^S"]]],"^X",["^Q",[null,null]]]],"^6","~$rewrite-clj.zip.base/print","^K","out/rewrite_clj/zip/base.cljc","^O",12,"^1G",["^ ","^Y",false,"^1H",2,"^11",2,"^V",[["^S","^1S"],["^S"]],"^P",["^Q",[["^S","^1S"],["^S"]]],"^X",["^Q",[null,null]]],"^V",[["^S","^1S"],["^S"]],"^W",null,"^1H",2,"^X",["^Q",[null,null]],"^M",1,"^Y",false,"^1J",[["^ ","^1H",2,"^Y",false,"^1K","^10"],["^ ","^1H",1,"^Y",false,"^1K","^10"]],"^L",150,"^N",150,"^11",2,"^12",true,"^P",["^Q",[["^S","^1S"],["^S"]]],"^T","Print current node in `zloc`.\n\n   NOTE: Optional `writer` is currently ignored for ClojureScript."],"~$of-node",["^ ","^I",null,"^J",["^ ","^K","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/base.cljc","^L",28,"^M",7,"^N",28,"^O",14,"^P",["^Q",["^R",["^Q",[["^@"],["^@","^1F"]]]]],"^T","Create and return zipper from a rewrite-clj `node` (likely parsed by [[rewrite-clj.parser]]),\n  and move to the first non-whitespace/non-comment child. If node is not forms node, is wrapped in forms node\n  for a consistent root.\n\n  Optional `opts` can specify:\n  - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)","^1G",["^ ","^Y",false,"^1H",2,"^11",2,"^V",[["^@"],["^@","^1F"]],"^P",["^Q",[["^@"],["^@","^1F"]]],"^X",["^Q",[null,null]]]],"^6","~$rewrite-clj.zip.base/of-node","^K","out/rewrite_clj/zip/base.cljc","^O",14,"^1G",["^ ","^Y",false,"^1H",2,"^11",2,"^V",[["^@"],["^@","^1F"]],"^P",["^Q",[["^@"],["^@","^1F"]]],"^X",["^Q",[null,null]]],"^V",[["^@"],["^@","^1F"]],"^W",null,"^1H",2,"^X",["^Q",[null,null]],"^M",1,"^Y",false,"^1J",[["^ ","^1H",1,"^Y",false,"^1K","^15"],["^ ","^1H",2,"^Y",false,"^1K",["^4",["^1L","^15","^1M","^10"]]]],"^L",28,"^N",28,"^11",2,"^12",true,"^P",["^Q",[["^@"],["^@","^1F"]]],"^T","Create and return zipper from a rewrite-clj `node` (likely parsed by [[rewrite-clj.parser]]),\n  and move to the first non-whitespace/non-comment child. If node is not forms node, is wrapped in forms node\n  for a consistent root.\n\n  Optional `opts` can specify:\n  - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)"],"~$string",["^ ","^I",null,"^J",["^ ","^K","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/base.cljc","^L",121,"^M",7,"^N",121,"^O",13,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^T","Return string representing the current node in `zloc`."],"^6","~$rewrite-clj.zip.base/string","^K","out/rewrite_clj/zip/base.cljc","^O",13,"^V",["^Q",[["^S"]]],"^W",null,"^X",["^Q",[null,null]],"^M",1,"^Y",false,"^L",121,"^Z",["^4",["^15","^10"]],"^N",121,"^11",1,"^12",true,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^T","Return string representing the current node in `zloc`."],"~$edn",["^ ","^I",null,"^J",["^ ","^K","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/base.cljc","^L",52,"^M",7,"^N",52,"^O",10,"^P",["^Q",["^R",["^Q",[["^@"],["^@","^1F"]]]]],"^T","DEPRECATED. Renamed to [[of-node]].","^1G",["^ ","^Y",false,"^1H",2,"^11",2,"^V",[["^@"],["^@","^1F"]],"^P",["^Q",[["^@"],["^@","^1F"]]],"^X",["^Q",[null,null]]]],"^6","~$rewrite-clj.zip.base/edn","^K","out/rewrite_clj/zip/base.cljc","^O",10,"^1G",["^ ","^Y",false,"^1H",2,"^11",2,"^V",[["^@"],["^@","^1F"]],"^P",["^Q",[["^@"],["^@","^1F"]]],"^X",["^Q",[null,null]]],"^V",[["^@"],["^@","^1F"]],"^W",null,"^1H",2,"^X",["^Q",[null,null]],"^M",1,"^Y",false,"^1J",[["^ ","^1H",1,"^Y",false,"^1K","^15"],["^ ","^1H",2,"^Y",false,"^1K",["^4",["^1L","^15","^1M","^10"]]]],"^L",52,"^N",52,"^11",2,"^12",true,"^P",["^Q",[["^@"],["^@","^1F"]]],"^T","DEPRECATED. Renamed to [[of-node]]."],"~$length",["^ ","^I",null,"^J",["^ ","^K","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/base.cljc","^L",86,"^M",7,"^N",86,"^O",13,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^T","Return length of printable [[string]] of current node in `zloc`."],"^6","~$rewrite-clj.zip.base/length","^K","out/rewrite_clj/zip/base.cljc","^O",13,"^V",["^Q",[["^S"]]],"^W",null,"^X",["^Q",[null,null]],"^M",1,"^Y",false,"^L",86,"^Z",["^4",["^15","~$number"]],"^N",86,"^11",1,"^12",true,"^P",["^Q",["^R",["^Q",[["^S"]]]]],"^T","Return length of printable [[string]] of current node in `zloc`."],"~$of-string",["^ ","^I",null,"^J",["^ ","^K","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/zip/base.cljc","^L",98,"^M",7,"^N",98,"^O",16,"^P",["^Q",["^R",["^Q",[["~$s"],["~$s","^1F"]]]]],"^T","Create and return zipper from all forms in Clojure/ClojureScript/EDN string `s`.\n\n  Optional `opts` can specify:\n  - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)","^1G",["^ ","^Y",false,"^1H",2,"^11",2,"^V",[["~$s"],["~$s","^1F"]],"^P",["^Q",[["~$s"],["~$s","^1F"]]],"^X",["^Q",[null,null]]]],"^6","~$rewrite-clj.zip.base/of-string","^K","out/rewrite_clj/zip/base.cljc","^O",16,"^1G",["^ ","^Y",false,"^1H",2,"^11",2,"^V",[["~$s"],["~$s","^1F"]],"^P",["^Q",[["~$s"],["~$s","^1F"]]],"^X",["^Q",[null,null]]],"^V",[["~$s"],["~$s","^1F"]],"^W",null,"^1H",2,"^X",["^Q",[null,null]],"^M",1,"^Y",false,"^1J",[["^ ","^1H",1,"^Y",false,"^1K","^15"],["^ ","^1H",2,"^Y",false,"^1K",["^4",["^1L","^15","^1M","^10"]]]],"^L",98,"^N",98,"^11",2,"^12",true,"^P",["^Q",[["~$s"],["~$s","^1F"]]],"^T","Create and return zipper from all forms in Clojure/ClojureScript/EDN string `s`.\n\n  Optional `opts` can specify:\n  - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:track-position?","~:forms"]],"~:order",["^29","^2:"]],"^T",null,"~:as-aliases",["^ "]]
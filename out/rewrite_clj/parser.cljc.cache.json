["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$rewrite-clj.parser","~:imports",null,"~:requires",["^ ","~$nforms","~$rewrite-clj.node.forms","^:","^:","~$p","~$rewrite-clj.parser.core","^;","^;","~$reader","~$rewrite-clj.reader","^=","^="],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$parse",["^ ","~:no-doc",true,"~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/parser.cljc","~:line",17,"~:column",16,"~:end-line",17,"~:end-column",21,"^B",true,"~:arglists",["~#list",["~$quote",["^K",[["^<"]]]]],"~:doc","Parse next form from the given reader."],"^5","~$rewrite-clj.parser/parse","^E","out/rewrite_clj/parser.cljc","^I",21,"~:method-params",["^K",[["^<"]]],"~:protocol-impl",null,"~:arglists-meta",["^K",[null,null]],"^G",1,"~:variadic?",false,"^F",17,"~:ret-tag",["^4",["~$clj","~$cljs.core/MetaFn","~$clj-nil"]],"^H",17,"~:max-fixed-arity",1,"~:fn-var",true,"^J",["^K",["^L",["^K",[["^<"]]]]],"^M","Parse next form from the given reader."],"~$parse-all",["^ ","^B",true,"^C",null,"^D",["^ ","^E","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/parser.cljc","^F",22,"^G",16,"^H",22,"^I",25,"^B",true,"^J",["^K",["^L",["^K",[["^<"]]]]],"^M","Parse all forms from the given reader."],"^5","~$rewrite-clj.parser/parse-all","^E","out/rewrite_clj/parser.cljc","^I",25,"^O",["^K",[["^<"]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^R",false,"^F",22,"^S",["^4",["^T","^U","^V"]],"^H",22,"^W",1,"^X",true,"^J",["^K",["^L",["^K",[["^<"]]]]],"^M","Parse all forms from the given reader."],"~$parse-string",["^ ","^C",null,"^D",["^ ","^E","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/parser.cljc","^F",34,"^G",7,"^H",34,"^I",19,"^J",["^K",["^L",["^K",[["~$s"]]]]],"^M","Return a node for first source code element in string `s`."],"^5","~$rewrite-clj.parser/parse-string","^E","out/rewrite_clj/parser.cljc","^I",19,"^O",["^K",[["~$s"]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^R",false,"^F",34,"^S",["^4",["^T","^U","^V"]],"^H",34,"^W",1,"^X",true,"^J",["^K",["^L",["^K",[["~$s"]]]]],"^M","Return a node for first source code element in string `s`."],"~$parse-string-all",["^ ","^C",null,"^D",["^ ","^E","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/parser.cljc","^F",39,"^G",7,"^H",39,"^I",23,"^J",["^K",["^L",["^K",[["~$s"]]]]],"^M","Return forms node for all source code elements in string `s`."],"^5","~$rewrite-clj.parser/parse-string-all","^E","out/rewrite_clj/parser.cljc","^I",23,"^O",["^K",[["~$s"]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^R",false,"^F",39,"^S",["^4",["^T","^U","^V"]],"^H",39,"^W",1,"^X",true,"^J",["^K",["^L",["^K",[["~$s"]]]]],"^M","Return forms node for all source code elements in string `s`."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:end-row","~:end-col"]],"~:order",["^17","^18"]],"^M","Parse Clojure/ClojureScript/EDN source code to nodes.\n\n  Parsing includes all source code elements including whitespace.\n\n  After parsing, the typical next step is [[rewrite-clj.zip/edn]] to create zipper.\n\n  Alternatively consider parsing and zipping in one step from [[rewrite-clj.zip/of-string]] or [[rewrite-clj.zip/of-file]].","~:as-aliases",["^ "]]
["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$rewrite-clj.node.fn","~:imports",null,"~:requires",["^ ","~$string","~$clojure.string","^:","^:","~$w","~$clojure.walk","^;","^;","~$interop","~$rewrite-clj.interop","^=","^=","~$node","~$rewrite-clj.node.protocols","^?","^?"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$construct-fn",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/fn.cljc","~:line",11,"~:column",8,"~:end-line",11,"~:end-column",20,"~:private",true,"~:arglists",["~#list",["~$quote",["^M",[["~$fixed-arg-syms","~$vararg-sym","~$body"]]]]],"~:doc","Construct function form."],"^K",true,"^5","~$rewrite-clj.node.fn/construct-fn","^F","out/rewrite_clj/node/fn.cljc","^J",20,"~:method-params",["^M",[["^O","^P","^Q"]]],"~:protocol-impl",null,"~:arglists-meta",["^M",[null,null]],"^H",1,"~:variadic?",false,"^G",11,"~:ret-tag","~$cljs.core/List","^I",11,"~:max-fixed-arity",3,"~:fn-var",true,"^L",["^M",["^N",["^M",[["^O","^P","^Q"]]]]],"^R","Construct function form."],"~$arg-index",["^ ","^D",null,"^E",["^ ","^F","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/fn.cljc","^G",23,"^H",8,"^I",23,"^J",17,"^K",true,"^L",["^M",["^N",["^M",[["~$n"]]]]],"^R","Get index based on the substring following the arg's `%`.\n   Zero means vararg."],"^K",true,"^5","~$rewrite-clj.node.fn/arg-index","^F","out/rewrite_clj/node/fn.cljc","^J",17,"^T",["^M",[["~$n"]]],"^U",null,"^V",["^M",[null,null]],"^H",1,"^W",false,"^G",23,"^X",["^4",["~$number","~$js/Number"]],"^I",23,"^Z",1,"^[",true,"^L",["^M",["^N",["^M",[["~$n"]]]]],"^R","Get index based on the substring following the arg's `%`.\n   Zero means vararg."],"~$arg-symbol->gensym",["^ ","^D",null,"^E",["^ ","^F","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/fn.cljc","^G",32,"^H",8,"^I",32,"^J",26,"^K",true,"^L",["^M",["^N",["^M",[["~$gensym-seq","~$vararg?","~$max-fixed-arg-ndx","~$sym"]]]]],"^R","If symbol starting with `%`, convert to respective gensym."],"^K",true,"^5","~$rewrite-clj.node.fn/arg-symbol->gensym","^F","out/rewrite_clj/node/fn.cljc","^J",26,"^T",["^M",[["^15","^16","^17","^18"]]],"^U",null,"^V",["^M",[null,null]],"^H",1,"^W",false,"^G",32,"^X",["^4",["~$any","~$clj-nil"]],"^I",32,"^Z",4,"^[",true,"^L",["^M",["^N",["^M",[["^15","^16","^17","^18"]]]]],"^R","If symbol starting with `%`, convert to respective gensym."],"~$fn-walk",["^ ","^D",null,"^E",["^ ","^F","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/fn.cljc","^G",44,"^H",8,"^I",44,"^J",15,"^K",true,"^L",["^M",["^N",["^M",[["~$form"]]]]],"^R","Walk the form and create an expand function form."],"^K",true,"^5","~$rewrite-clj.node.fn/fn-walk","^F","out/rewrite_clj/node/fn.cljc","^J",15,"^T",["^M",[["^1="]]],"^U",null,"^V",["^M",[null,null]],"^H",1,"^W",false,"^G",44,"^X","^Y","^I",44,"^Z",1,"^[",true,"^L",["^M",["^N",["^M",[["^1="]]]]],"^R","Walk the form and create an expand function form."],"~$FnNode",["^ ","~:num-fields",1,"~:protocols",["^4",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$rewrite-clj.node.protocols/InnerNode","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$rewrite-clj.node.fn/Object","~$rewrite-clj.node.protocols/Node","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^5","~$rewrite-clj.node.fn/FnNode","^F","out/rewrite_clj/node/fn.cljc","^J",18,"~:type",true,"^H",12,"~:internal-ctor",true,"^G",66,"~:record",true,"^I",66,"~:tag","~$function","~:skip-protocol-flag",["^4",["^1B","^1C","^1D","^1E","^1F","^1G","^1I","^1J","^1K","^1L","^1M","^1P","^1Q","^1R","^1S"]]],"~$->FnNode",["^ ","^D",null,"^E",["^ ","^F","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/fn.cljc","^J",18,"^H",12,"^1V",true,"~:factory","~:positional","^G",66,"^I",66,"^L",["^M",["^N",["^M",[["~$children"]]]]],"^R","Positional factory function for rewrite-clj.node.fn/FnNode."],"^5","~$rewrite-clj.node.fn/->FnNode","^F","out/rewrite_clj/node/fn.cljc","^J",18,"^T",["^M",[["^22"]]],"^U",null,"^V",["^M",[null,null]],"^H",1,"^1V",true,"^W",false,"^20","^21","^G",66,"^X","^1T","^I",66,"^Z",1,"^[",true,"^L",["^M",["^N",["^M",[["^22"]]]]],"^R","Positional factory function for rewrite-clj.node.fn/FnNode."],"~$map->FnNode",["^ ","^D",null,"^E",["^ ","^F","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/fn.cljc","^J",18,"^H",12,"^1V",true,"^20","~:map","^G",66,"^I",66,"^L",["^M",["^N",["^M",[["~$G__2789"]]]]],"^R","Factory function for rewrite-clj.node.fn/FnNode, taking a map of keywords to field values."],"^5","~$rewrite-clj.node.fn/map->FnNode","^F","out/rewrite_clj/node/fn.cljc","^J",18,"^T",["^M",[["^26"]]],"^U",null,"^V",["^M",[null,null]],"^H",1,"^1V",true,"^W",false,"^20","^25","^G",66,"^X","^1T","^I",66,"^Z",1,"^[",true,"^L",["^M",["^N",["^M",[["^26"]]]]],"^R","Factory function for rewrite-clj.node.fn/FnNode, taking a map of keywords to field values."],"~$fn-node",["^ ","^D",null,"^E",["^ ","^F","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/fn.cljc","^G",93,"^H",7,"^I",93,"^J",14,"^L",["^M",["^N",["^M",[["^22"]]]]],"^R","Create node representing an anonymous function with `children`.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/fn-node [(n/token-node '+)\n                   (n/spaces 1)\n                   (n/token-node 1)\n                   (n/spaces 1)\n                   (n/token-node '%1)])\n       n/string)\n   ;; => \"#(+ 1 %1)\"\n   ```"],"^5","~$rewrite-clj.node.fn/fn-node","^F","out/rewrite_clj/node/fn.cljc","^J",14,"^T",["^M",[["^22"]]],"^U",null,"^V",["^M",[null,null]],"^H",1,"^W",false,"^G",93,"^X","^1T","^I",93,"^Z",1,"^[",true,"^L",["^M",["^N",["^M",[["^22"]]]]],"^R","Create node representing an anonymous function with `children`.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/fn-node [(n/token-node '+)\n                   (n/spaces 1)\n                   (n/token-node 1)\n                   (n/spaces 1)\n                   (n/token-node '%1)])\n       n/string)\n   ;; => \"#(+ 1 %1)\"\n   ```"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~$&","~:children","~:fn","~:else","^22","~$fn*"]],"~:order",["^2A","~$&","^2@","^2>","^2?","^22"]],"^R",null,"~:as-aliases",["^ "]]
["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$rewrite-clj.node.comment","~:imports",null,"~:requires",["^ ","~$node","~$rewrite-clj.node.protocols","^:","^:"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$CommentNode",["^ ","~:num-fields",2,"~:protocols",["^4",["~$cljs.core/IRecord","~$rewrite-clj.node.comment/Object","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$rewrite-clj.node.protocols/Node","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^5","~$rewrite-clj.node.comment/CommentNode","~:file","out/rewrite_clj/node/comment.cljc","~:end-column",23,"~:type",true,"~:column",12,"~:internal-ctor",true,"~:line",8,"~:record",true,"~:end-line",8,"~:tag","~$function","~:skip-protocol-flag",["^4",["^A","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L","^N","^O","^P","^Q"]]],"~$->CommentNode",["^ ","~:protocol-inline",null,"~:meta",["^ ","^S","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/comment.cljc","^T",23,"^V",12,"^W",true,"~:factory","~:positional","^X",8,"^Z",8,"~:arglists",["~#list",["~$quote",["^18",[["~$prefix","~$s"]]]]],"~:doc","Positional factory function for rewrite-clj.node.comment/CommentNode."],"^5","~$rewrite-clj.node.comment/->CommentNode","^S","out/rewrite_clj/node/comment.cljc","^T",23,"~:method-params",["^18",[["^1:","~$s"]]],"~:protocol-impl",null,"~:arglists-meta",["^18",[null,null]],"^V",1,"^W",true,"~:variadic?",false,"^15","^16","^X",8,"~:ret-tag","^R","^Z",8,"~:max-fixed-arity",2,"~:fn-var",true,"^17",["^18",["^19",["^18",[["^1:","~$s"]]]]],"^1;","Positional factory function for rewrite-clj.node.comment/CommentNode."],"~$map->CommentNode",["^ ","^13",null,"^14",["^ ","^S","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/comment.cljc","^T",23,"^V",12,"^W",true,"^15","~:map","^X",8,"^Z",8,"^17",["^18",["^19",["^18",[["~$G__710"]]]]],"^1;","Factory function for rewrite-clj.node.comment/CommentNode, taking a map of keywords to field values."],"^5","~$rewrite-clj.node.comment/map->CommentNode","^S","out/rewrite_clj/node/comment.cljc","^T",23,"^1=",["^18",[["^1F"]]],"^1>",null,"^1?",["^18",[null,null]],"^V",1,"^W",true,"^1@",false,"^15","^1E","^X",8,"^1A","^R","^Z",8,"^1B",1,"^1C",true,"^17",["^18",["^19",["^18",[["^1F"]]]]],"^1;","Factory function for rewrite-clj.node.comment/CommentNode, taking a map of keywords to field values."],"~$comment-node",["^ ","^13",null,"^14",["^ ","^S","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/comment.cljc","^X",28,"^V",7,"^Z",28,"^T",19,"^17",["^18",["^19",["^18",[["~$s"],["^1:","~$s"]]]]],"^1;","Create node representing a comment with text `s`.\n\n   You may optionally specify a `prefix` of `\";\"` or `\"#!\"`, defaults is `\";\"`.\n\n   Argument `s`:\n   - must not include the `prefix`\n   - usually includes the trailing newline character, otherwise subsequent nodes will be on the comment line\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/comment-node \"; my comment\\n\")\n       n/string)\n   ;; => \";; my comment\\n\"\n\n   (-> (n/comment-node \"#!\" \"/usr/bin/env bb\\n\")\n       n/string)\n   ;; => \"#!/usr/bin/env bb\\n\"\n   ```","~:top-fn",["^ ","^1@",false,"~:fixed-arity",2,"^1B",2,"^1=",[["~$s"],["^1:","~$s"]],"^17",["^18",[["~$s"],["^1:","~$s"]]],"^1?",["^18",[null,null]]]],"^5","~$rewrite-clj.node.comment/comment-node","^S","out/rewrite_clj/node/comment.cljc","^T",19,"^1I",["^ ","^1@",false,"^1J",2,"^1B",2,"^1=",[["~$s"],["^1:","~$s"]],"^17",["^18",[["~$s"],["^1:","~$s"]]],"^1?",["^18",[null,null]]],"^1=",[["~$s"],["^1:","~$s"]],"^1>",null,"^1J",2,"^1?",["^18",[null,null]],"^V",1,"^1@",false,"~:methods",[["^ ","^1J",1,"^1@",false,"^[","~$any"],["^ ","^1J",2,"^1@",false,"^[","^R"]],"^X",28,"^Z",28,"^1B",2,"^1C",true,"^17",["^18",[["~$s"],["^1:","~$s"]]],"^1;","Create node representing a comment with text `s`.\n\n   You may optionally specify a `prefix` of `\";\"` or `\"#!\"`, defaults is `\";\"`.\n\n   Argument `s`:\n   - must not include the `prefix`\n   - usually includes the trailing newline character, otherwise subsequent nodes will be on the comment line\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/comment-node \"; my comment\\n\")\n       n/string)\n   ;; => \";; my comment\\n\"\n\n   (-> (n/comment-node \"#!\" \"/usr/bin/env bb\\n\")\n       n/string)\n   ;; => \"#!/usr/bin/env bb\\n\"\n   ```"],"~$comment?",["^ ","^13",null,"^14",["^ ","^S","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/comment.cljc","^X",55,"^V",7,"^Z",55,"^T",15,"^17",["^18",["^19",["^18",[["^9"]]]]],"^1;","Returns true if `node` is a comment."],"^5","~$rewrite-clj.node.comment/comment?","^S","out/rewrite_clj/node/comment.cljc","^T",15,"^1=",["^18",[["^9"]]],"^1>",null,"^1?",["^18",[null,null]],"^V",1,"^1@",false,"^X",55,"^1A","~$boolean","^Z",55,"^1B",1,"^1C",true,"^17",["^18",["^19",["^18",[["^9"]]]]],"^1;","Returns true if `node` is a comment."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:s","~:prefix","~:comment","~$s","^1:"]],"~:order",["^1U","~:s","^1V","^1:","~$s"]],"^1;",null,"~:as-aliases",["^ "]]
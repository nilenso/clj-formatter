["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$rewrite-clj.node.regex","~:imports",null,"~:requires",["^ ","~$node","~$rewrite-clj.node.protocols","^:","^:"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$RegexNode",["^ ","~:num-fields",1,"~:protocols",["^4",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$rewrite-clj.node.regex/Object","~$rewrite-clj.node.protocols/Node","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^5","~$rewrite-clj.node.regex/RegexNode","~:file","out/rewrite_clj/node/regex.cljc","~:end-column",21,"~:type",true,"~:column",12,"~:internal-ctor",true,"~:line",8,"~:record",true,"~:end-line",8,"~:tag","~$function","~:skip-protocol-flag",["^4",["^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^N","^O","^P","^Q"]]],"~$->RegexNode",["^ ","~:protocol-inline",null,"~:meta",["^ ","^S","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/regex.cljc","^T",21,"^V",12,"^W",true,"~:factory","~:positional","^X",8,"^Z",8,"~:arglists",["~#list",["~$quote",["^18",[["~$pattern"]]]]],"~:doc","Positional factory function for rewrite-clj.node.regex/RegexNode."],"^5","~$rewrite-clj.node.regex/->RegexNode","^S","out/rewrite_clj/node/regex.cljc","^T",21,"~:method-params",["^18",[["^1:"]]],"~:protocol-impl",null,"~:arglists-meta",["^18",[null,null]],"^V",1,"^W",true,"~:variadic?",false,"^15","^16","^X",8,"~:ret-tag","^R","^Z",8,"~:max-fixed-arity",1,"~:fn-var",true,"^17",["^18",["^19",["^18",[["^1:"]]]]],"^1;","Positional factory function for rewrite-clj.node.regex/RegexNode."],"~$map->RegexNode",["^ ","^13",null,"^14",["^ ","^S","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/regex.cljc","^T",21,"^V",12,"^W",true,"^15","~:map","^X",8,"^Z",8,"^17",["^18",["^19",["^18",[["~$G__2971"]]]]],"^1;","Factory function for rewrite-clj.node.regex/RegexNode, taking a map of keywords to field values."],"^5","~$rewrite-clj.node.regex/map->RegexNode","^S","out/rewrite_clj/node/regex.cljc","^T",21,"^1=",["^18",[["^1F"]]],"^1>",null,"^1?",["^18",[null,null]],"^V",1,"^W",true,"^1@",false,"^15","^1E","^X",8,"^1A","^R","^Z",8,"^1B",1,"^1C",true,"^17",["^18",["^19",["^18",[["^1F"]]]]],"^1;","Factory function for rewrite-clj.node.regex/RegexNode, taking a map of keywords to field values."],"~$pattern-string-for-regex",["^ ","^13",null,"^14",["^ ","^S","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/regex.cljc","^X",29,"^V",7,"^Z",29,"^T",31,"^17",["^18",["^19",["^18",[["~$regex"]]]]]],"^5","~$rewrite-clj.node.regex/pattern-string-for-regex","^S","out/rewrite_clj/node/regex.cljc","^T",31,"^1=",["^18",[["^1I"]]],"^1>",null,"^1?",["^18",[null,null]],"^V",1,"^1@",false,"^X",29,"^1A","~$any","^Z",29,"^1B",1,"^1C",true,"^17",["^18",["^19",["^18",[["^1I"]]]]]],"~$regex-node",["^ ","^13",null,"^14",["^ ","^S","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/regex.cljc","^X",36,"^V",7,"^Z",36,"^T",17,"^17",["^18",["^19",["^18",[["~$pattern-string"]]]]],"^1;","Create node representing a regex with `pattern-string`.\n   Use same escape rules for `pattern-string` as you would for `(re-pattern \"pattern-string\")`\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/regex-node \"my\\\\.lil.*regex\")\n       n/string)\n   ;; => \"#\\\"my\\\\.lil.*regex\\\"\"\n   ```"],"^5","~$rewrite-clj.node.regex/regex-node","^S","out/rewrite_clj/node/regex.cljc","^T",17,"^1=",["^18",[["^1M"]]],"^1>",null,"^1?",["^18",[null,null]],"^V",1,"^1@",false,"^X",36,"^1A","^R","^Z",36,"^1B",1,"^1C",true,"^17",["^18",["^19",["^18",[["^1M"]]]]],"^1;","Create node representing a regex with `pattern-string`.\n   Use same escape rules for `pattern-string` as you would for `(re-pattern \"pattern-string\")`\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/regex-node \"my\\\\.lil.*regex\")\n       n/string)\n   ;; => \"#\\\"my\\\\.lil.*regex\\\"\"\n   ```"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["^1:","~$re-pattern","~:regex","~:pattern"]],"~:order",["^1U","^1T","^1S","^1:"]],"^1;",null,"~:as-aliases",["^ "]]
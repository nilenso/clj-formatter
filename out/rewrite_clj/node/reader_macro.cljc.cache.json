["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$rewrite-clj.node.reader-macro","~:imports",null,"~:requires",["^ ","~$node","~$rewrite-clj.node.protocols","^:","^:","~$ws","~$rewrite-clj.node.whitespace","^<","^<"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$map->ReaderNode",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/reader_macro.cljc","~:end-column",22,"~:column",12,"~:internal-ctor",true,"~:factory","~:map","~:line",9,"~:end-line",9,"~:arglists",["~#list",["~$quote",["^L",[["~$G__2808"]]]]],"~:doc","Factory function for rewrite-clj.node.reader-macro/ReaderNode, taking a map of keywords to field values."],"^5","~$rewrite-clj.node.reader-macro/map->ReaderNode","^C","out/rewrite_clj/node/reader_macro.cljc","^D",22,"~:method-params",["^L",[["^N"]]],"~:protocol-impl",null,"~:arglists-meta",["^L",[null,null]],"^E",1,"^F",true,"~:variadic?",false,"^G","^H","^I",9,"~:ret-tag","~$rewrite-clj.node.reader-macro/ReaderNode","^J",9,"~:max-fixed-arity",1,"~:fn-var",true,"^K",["^L",["^M",["^L",[["^N"]]]]],"^O","Factory function for rewrite-clj.node.reader-macro/ReaderNode, taking a map of keywords to field values."],"~$->node",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/reader_macro.cljc","^I",95,"^E",8,"^J",95,"^D",14,"~:private",true,"^K",["^L",["^M",["^L",[["~$tag","~$prefix","~$suffix","~$sexpr-fn","~$sexpr-count","~$children"]]]]]],"^Z",true,"^5","~$rewrite-clj.node.reader-macro/->node","^C","out/rewrite_clj/node/reader_macro.cljc","^D",14,"^Q",["^L",[["^[","^10","^11","^12","^13","^14"]]],"^R",null,"^S",["^L",[null,null]],"^E",1,"^T",false,"^I",95,"^U","^V","^J",95,"^W",6,"^X",true,"^K",["^L",["^M",["^L",[["^[","^10","^11","^12","^13","^14"]]]]]],"~$map->DerefNode",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/reader_macro.cljc","^D",21,"^E",12,"^F",true,"^G","^H","^I",65,"^J",65,"^K",["^L",["^M",["^L",[["~$G__2842"]]]]],"^O","Factory function for rewrite-clj.node.reader-macro/DerefNode, taking a map of keywords to field values."],"^5","~$rewrite-clj.node.reader-macro/map->DerefNode","^C","out/rewrite_clj/node/reader_macro.cljc","^D",21,"^Q",["^L",[["^17"]]],"^R",null,"^S",["^L",[null,null]],"^E",1,"^F",true,"^T",false,"^G","^H","^I",65,"^U","~$rewrite-clj.node.reader-macro/DerefNode","^J",65,"^W",1,"^X",true,"^K",["^L",["^M",["^L",[["^17"]]]]],"^O","Factory function for rewrite-clj.node.reader-macro/DerefNode, taking a map of keywords to field values."],"~$var-node",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/reader_macro.cljc","^I",104,"^E",7,"^J",104,"^D",15,"^K",["^L",["^M",["^L",[["^14"]]]]],"^O","Create node representing a var where `children` is either a\n   sequence of nodes or a single node.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/var-node (n/token-node 'my-var))\n       n/string)\n   ;; => \"#'my-var\"\n\n   ;; specifying a sequence allows for whitespace between the\n   ;; prefix and the var\n   (-> (n/var-node [(n/spaces 2)\n                    (n/token-node 'my-var)])\n       n/string)\n   ;; => \"#'  my-var\"\n   ```"],"^5","~$rewrite-clj.node.reader-macro/var-node","^C","out/rewrite_clj/node/reader_macro.cljc","^D",15,"^Q",["^L",[["^14"]]],"^R",null,"^S",["^L",[null,null]],"^E",1,"^T",false,"^I",104,"^U","^V","^J",104,"^W",1,"^X",true,"^K",["^L",["^M",["^L",[["^14"]]]]],"^O","Create node representing a var where `children` is either a\n   sequence of nodes or a single node.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/var-node (n/token-node 'my-var))\n       n/string)\n   ;; => \"#'my-var\"\n\n   ;; specifying a sequence allows for whitespace between the\n   ;; prefix and the var\n   (-> (n/var-node [(n/spaces 2)\n                    (n/token-node 'my-var)])\n       n/string)\n   ;; => \"#'  my-var\"\n   ```"],"~$eval-node",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/reader_macro.cljc","^I",127,"^E",7,"^J",127,"^D",16,"^K",["^L",["^M",["^L",[["^14"]]]]],"^O","Create node representing an inline evaluation\n   where `children` is either a sequence of nodes or a single node.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/eval-node (n/list-node [(n/token-node 'inc)\n                                  (n/spaces 1)\n                                  (n/token-node 1)]))\n       n/string)\n   ;; => \"#=(inc 1)\"\n\n   ;; specifying a sequence allows for whitespace between the\n   ;; prefix and the form\n   (-> (n/eval-node [(n/spaces 3)\n                     (n/list-node [(n/token-node 'inc)\n                                   (n/spaces 1)\n                                   (n/token-node 1)])])\n       n/string)\n   ;; => \"#=   (inc 1)\"\n   ```"],"^5","~$rewrite-clj.node.reader-macro/eval-node","^C","out/rewrite_clj/node/reader_macro.cljc","^D",16,"^Q",["^L",[["^14"]]],"^R",null,"^S",["^L",[null,null]],"^E",1,"^T",false,"^I",127,"^U","^V","^J",127,"^W",1,"^X",true,"^K",["^L",["^M",["^L",[["^14"]]]]],"^O","Create node representing an inline evaluation\n   where `children` is either a sequence of nodes or a single node.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/eval-node (n/list-node [(n/token-node 'inc)\n                                  (n/spaces 1)\n                                  (n/token-node 1)]))\n       n/string)\n   ;; => \"#=(inc 1)\"\n\n   ;; specifying a sequence allows for whitespace between the\n   ;; prefix and the form\n   (-> (n/eval-node [(n/spaces 3)\n                     (n/list-node [(n/token-node 'inc)\n                                   (n/spaces 1)\n                                   (n/token-node 1)])])\n       n/string)\n   ;; => \"#=   (inc 1)\"\n   ```"],"~$deref-node",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/reader_macro.cljc","^I",181,"^E",7,"^J",181,"^D",17,"^K",["^L",["^M",["^L",[["^14"]]]]],"^O","Create node representing the dereferencing of a form\n   where `children` is either a sequence of nodes or a single node.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/deref-node (n/token-node 'my-var))\n       n/string)\n   ;; => \"@my-var\"\n\n   ;; specifying a sequence allows for whitespace between @ and form\n   (-> (n/deref-node [(n/spaces 2)\n                      (n/token-node 'my-var)])\n       n/string)\n   ;; => \"@  my-var\"\n   ```"],"^5","~$rewrite-clj.node.reader-macro/deref-node","^C","out/rewrite_clj/node/reader_macro.cljc","^D",17,"^Q",["^L",[["^14"]]],"^R",null,"^S",["^L",[null,null]],"^E",1,"^T",false,"^I",181,"^U","^19","^J",181,"^W",1,"^X",true,"^K",["^L",["^M",["^L",[["^14"]]]]],"^O","Create node representing the dereferencing of a form\n   where `children` is either a sequence of nodes or a single node.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/deref-node (n/token-node 'my-var))\n       n/string)\n   ;; => \"@my-var\"\n\n   ;; specifying a sequence allows for whitespace between @ and form\n   (-> (n/deref-node [(n/spaces 2)\n                      (n/token-node 'my-var)])\n       n/string)\n   ;; => \"@  my-var\"\n   ```"],"~$DerefNode",["^ ","~:num-fields",1,"~:protocols",["^4",["~$cljs.core/IRecord","~$rewrite-clj.node.reader-macro/Object","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$rewrite-clj.node.protocols/InnerNode","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$rewrite-clj.node.protocols/Node","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^5","^19","^C","out/rewrite_clj/node/reader_macro.cljc","^D",21,"~:type",true,"^E",12,"^F",true,"^I",65,"~:record",true,"^J",65,"~:tag","~$function","~:skip-protocol-flag",["^4",["^1C","^1E","^1F","^1G","^1H","^1I","^1K","^1L","^1M","^1N","^1O","^1Q","^1R","^1S","^1T"]]],"~$map->ReaderMacroNode",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/reader_macro.cljc","^D",27,"^E",12,"^F",true,"^G","^H","^I",41,"^J",41,"^K",["^L",["^M",["^L",[["~$G__2825"]]]]],"^O","Factory function for rewrite-clj.node.reader-macro/ReaderMacroNode, taking a map of keywords to field values."],"^5","~$rewrite-clj.node.reader-macro/map->ReaderMacroNode","^C","out/rewrite_clj/node/reader_macro.cljc","^D",27,"^Q",["^L",[["^1["]]],"^R",null,"^S",["^L",[null,null]],"^E",1,"^F",true,"^T",false,"^G","^H","^I",41,"^U","~$rewrite-clj.node.reader-macro/ReaderMacroNode","^J",41,"^W",1,"^X",true,"^K",["^L",["^M",["^L",[["^1["]]]]],"^O","Factory function for rewrite-clj.node.reader-macro/ReaderMacroNode, taking a map of keywords to field values."],"~$->ReaderNode",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/reader_macro.cljc","^D",22,"^E",12,"^F",true,"^G","~:positional","^I",9,"^J",9,"^K",["^L",["^M",["^L",[["^[","^10","^11","^12","^13","^14"]]]]],"^O","Positional factory function for rewrite-clj.node.reader-macro/ReaderNode."],"^5","~$rewrite-clj.node.reader-macro/->ReaderNode","^C","out/rewrite_clj/node/reader_macro.cljc","^D",22,"^Q",["^L",[["^[","^10","^11","^12","^13","^14"]]],"^R",null,"^S",["^L",[null,null]],"^E",1,"^F",true,"^T",false,"^G","^23","^I",9,"^U","^V","^J",9,"^W",6,"^X",true,"^K",["^L",["^M",["^L",[["^[","^10","^11","^12","^13","^14"]]]]],"^O","Positional factory function for rewrite-clj.node.reader-macro/ReaderNode."],"~$ReaderMacroNode",["^ ","^1A",1,"^1B",["^4",["^1C","^1D","^1E","^1F","^1G","^1H","^1I","^1J","^1K","^1L","^1M","^1N","^1O","^1P","^1Q","^1R","^1S","^1T"]],"^5","^21","^C","out/rewrite_clj/node/reader_macro.cljc","^D",27,"^1U",true,"^E",12,"^F",true,"^I",41,"^1V",true,"^J",41,"^1W","^1X","^1Y",["^4",["^1C","^1E","^1F","^1G","^1H","^1I","^1K","^1L","^1M","^1N","^1O","^1Q","^1R","^1S","^1T"]]],"~$reader-macro-node",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/reader_macro.cljc","^I",157,"^E",7,"^J",157,"^D",24,"^K",["^L",["^M",["^L",[["^14"],["~$macro-node","~$form-node"]]]]],"^O","Create node representing a reader macro with `macro-node` and `form-node` or `children`.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   ;; here we call with macro-node and form-node\n   (-> (n/reader-macro-node (n/token-node 'my-macro)\n                            (n/token-node 42))\n       n/string)\n   ;; => \"#my-macro 42\"\n\n   ;; calling with a sequence of children gives us control over whitespace\n   (-> (n/reader-macro-node [(n/token-node 'my-macro)\n                             (n/spaces 4)\n                             (n/token-node 42)])\n       n/string)\n   ;; => \"#my-macro    42\"\n   ```","~:top-fn",["^ ","^T",false,"~:fixed-arity",2,"^W",2,"^Q",[["^14"],["^27","^28"]],"^K",["^L",[["^14"],["^27","^28"]]],"^S",["^L",[null,null]]]],"^5","~$rewrite-clj.node.reader-macro/reader-macro-node","^C","out/rewrite_clj/node/reader_macro.cljc","^D",24,"^29",["^ ","^T",false,"^2:",2,"^W",2,"^Q",[["^14"],["^27","^28"]],"^K",["^L",[["^14"],["^27","^28"]]],"^S",["^L",[null,null]]],"^Q",[["^14"],["^27","^28"]],"^R",null,"^2:",2,"^S",["^L",[null,null]],"^E",1,"^T",false,"~:methods",[["^ ","^2:",1,"^T",false,"^1W","^21"],["^ ","^2:",2,"^T",false,"^1W","^21"]],"^I",157,"^J",157,"^W",2,"^X",true,"^K",["^L",[["^14"],["^27","^28"]]],"^O","Create node representing a reader macro with `macro-node` and `form-node` or `children`.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   ;; here we call with macro-node and form-node\n   (-> (n/reader-macro-node (n/token-node 'my-macro)\n                            (n/token-node 42))\n       n/string)\n   ;; => \"#my-macro 42\"\n\n   ;; calling with a sequence of children gives us control over whitespace\n   (-> (n/reader-macro-node [(n/token-node 'my-macro)\n                             (n/spaces 4)\n                             (n/token-node 42)])\n       n/string)\n   ;; => \"#my-macro    42\"\n   ```"],"~$->ReaderMacroNode",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/reader_macro.cljc","^D",27,"^E",12,"^F",true,"^G","^23","^I",41,"^J",41,"^K",["^L",["^M",["^L",[["^14"]]]]],"^O","Positional factory function for rewrite-clj.node.reader-macro/ReaderMacroNode."],"^5","~$rewrite-clj.node.reader-macro/->ReaderMacroNode","^C","out/rewrite_clj/node/reader_macro.cljc","^D",27,"^Q",["^L",[["^14"]]],"^R",null,"^S",["^L",[null,null]],"^E",1,"^F",true,"^T",false,"^G","^23","^I",41,"^U","^21","^J",41,"^W",1,"^X",true,"^K",["^L",["^M",["^L",[["^14"]]]]],"^O","Positional factory function for rewrite-clj.node.reader-macro/ReaderMacroNode."],"~$->DerefNode",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/reader_macro.cljc","^D",21,"^E",12,"^F",true,"^G","^23","^I",65,"^J",65,"^K",["^L",["^M",["^L",[["^14"]]]]],"^O","Positional factory function for rewrite-clj.node.reader-macro/DerefNode."],"^5","~$rewrite-clj.node.reader-macro/->DerefNode","^C","out/rewrite_clj/node/reader_macro.cljc","^D",21,"^Q",["^L",[["^14"]]],"^R",null,"^S",["^L",[null,null]],"^E",1,"^F",true,"^T",false,"^G","^23","^I",65,"^U","^19","^J",65,"^W",1,"^X",true,"^K",["^L",["^M",["^L",[["^14"]]]]],"^O","Positional factory function for rewrite-clj.node.reader-macro/DerefNode."],"~$ReaderNode",["^ ","^1A",6,"^1B",["^4",["^1C","^1D","^1E","^1F","^1G","^1H","^1I","^1J","^1K","^1L","^1M","^1N","^1O","^1P","^1Q","^1R","^1S","^1T"]],"^5","^V","^C","out/rewrite_clj/node/reader_macro.cljc","^D",22,"^1U",true,"^E",12,"^F",true,"^I",9,"^1V",true,"^J",9,"^1W","^1X","^1Y",["^4",["^1C","^1E","^1F","^1G","^1H","^1I","^1K","^1L","^1M","^1N","^1O","^1Q","^1R","^1S","^1T"]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^;","^<","^<","^<"],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["^[","^12","~:suffix","~:children","~$eval","~:reader-macro","^11","^14","~:sexpr-count","~:prefix","~:var","^13","~:deref","~:reader","^10","^1W","~$read-string","~$var","^M","~:sexpr-fn","~$deref","~:eval"]],"~:order",["^1W","^2K","^2F","^2Q","^2J","^2G","^2N","^[","^10","^11","^12","^13","^14","^2I","^2O","^2M","^2R","^2L","^2P","^2S","^2H","^M"]],"^O",null,"~:as-aliases",["^ "]]
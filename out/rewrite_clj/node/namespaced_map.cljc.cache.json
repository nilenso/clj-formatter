["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$rewrite-clj.node.namespaced-map","~:imports",null,"~:requires",["^ ","~$node","~$rewrite-clj.node.protocols","^:","^:"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$MapQualifierNode",["^ ","~:num-fields",2,"~:protocols",["^4",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$rewrite-clj.node.namespaced-map/Object","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$rewrite-clj.node.protocols/Node","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^5","~$rewrite-clj.node.namespaced-map/MapQualifierNode","~:file","out/rewrite_clj/node/namespaced_map.cljc","~:end-column",28,"~:type",true,"~:column",12,"~:internal-ctor",true,"~:line",6,"~:record",true,"~:end-line",6,"~:tag","~$function","~:skip-protocol-flag",["^4",["^A","^B","^C","^D","^E","^G","^H","^I","^J","^K","^L","^N","^O","^P","^Q"]]],"~$edit-map-children",["^ ","~:protocol-inline",null,"~:meta",["^ ","^S","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/namespaced_map.cljc","^X",29,"^V",8,"^Z",29,"^T",25,"~:private",true,"~:arglists",["~#list",["~$quote",["^17",[["~$children","~$f"]]]]],"~:doc","A map node's children are a list of nodes that can contain non-sexpr-able elements (ex. whitespace).\n\n  Returns `children` with `f` applied sexpressable children.\n\n  `f` is called with\n  - `n` - node\n  - `is-map-key?` true if the node is in keyword position\n  and should return `n` or a new version of `n`."],"^15",true,"^5","~$rewrite-clj.node.namespaced-map/edit-map-children","^S","out/rewrite_clj/node/namespaced_map.cljc","^T",25,"~:method-params",["^17",[["^19","~$f"]]],"~:protocol-impl",null,"~:arglists-meta",["^17",[null,null]],"^V",1,"~:variadic?",false,"^X",29,"~:ret-tag",["^4",["~$clj","~$cljs.core/IVector"]],"^Z",29,"~:max-fixed-arity",2,"~:fn-var",true,"^16",["^17",["^18",["^17",[["^19","~$f"]]]]],"^1:","A map node's children are a list of nodes that can contain non-sexpr-able elements (ex. whitespace).\n\n  Returns `children` with `f` applied sexpressable children.\n\n  `f` is called with\n  - `n` - node\n  - `is-map-key?` true if the node is in keyword position\n  and should return `n` or a new version of `n`."],"~$->MapQualifierNode",["^ ","^13",null,"^14",["^ ","^S","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/namespaced_map.cljc","^T",28,"^V",12,"^W",true,"~:factory","~:positional","^X",6,"^Z",6,"^16",["^17",["^18",["^17",[["~$auto-resolved?","~$prefix"]]]]],"^1:","Positional factory function for rewrite-clj.node.namespaced-map/MapQualifierNode."],"^5","~$rewrite-clj.node.namespaced-map/->MapQualifierNode","^S","out/rewrite_clj/node/namespaced_map.cljc","^T",28,"^1<",["^17",[["^1H","^1I"]]],"^1=",null,"^1>",["^17",[null,null]],"^V",1,"^W",true,"^1?",false,"^1F","^1G","^X",6,"^1@","^R","^Z",6,"^1C",2,"^1D",true,"^16",["^17",["^18",["^17",[["^1H","^1I"]]]]],"^1:","Positional factory function for rewrite-clj.node.namespaced-map/MapQualifierNode."],"~$namespaced-map-sexpr",["^ ","^13",null,"^14",["^ ","^S","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/namespaced_map.cljc","^X",91,"^V",8,"^Z",91,"^T",28,"^15",true,"^16",["^17",["^18",["^17",[["^19","~$opts"]]]]],"^1:","Assumes that appropriate qualifier context has been applied to contained map."],"^15",true,"^5","~$rewrite-clj.node.namespaced-map/namespaced-map-sexpr","^S","out/rewrite_clj/node/namespaced_map.cljc","^T",28,"^1<",["^17",[["^19","^1L"]]],"^1=",null,"^1>",["^17",[null,null]],"^V",1,"^1?",false,"^X",91,"^1@","~$any","^Z",91,"^1C",2,"^1D",true,"^16",["^17",["^18",["^17",[["^19","^1L"]]]]],"^1:","Assumes that appropriate qualifier context has been applied to contained map."],"~$map-qualifier-node",["^ ","^13",null,"^14",["^ ","^S","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/namespaced_map.cljc","^X",126,"^V",7,"^Z",126,"^T",25,"^16",["^17",["^18",["^17",[["^1H","^1I"]]]]],"^1:","Create a map qualifier node.\n   The map qualifier node is a child node of [[namespaced-map-node]].\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   ;; qualified\n   (-> (n/map-qualifier-node false \"my-prefix\")\n       n/string)\n   ;; => \":my-prefix\"\n\n   ;; auto-resolved to current ns\n   (-> (n/map-qualifier-node true nil)\n       n/string)\n   ;; => \"::\"\n\n   ;; auto-resolve to namespace with alias\n   (-> (n/map-qualifier-node true \"my-ns-alias\")\n       n/string)\n   ;; => \"::my-ns-alias\"\n   ```"],"^5","~$rewrite-clj.node.namespaced-map/map-qualifier-node","^S","out/rewrite_clj/node/namespaced_map.cljc","^T",25,"^1<",["^17",[["^1H","^1I"]]],"^1=",null,"^1>",["^17",[null,null]],"^V",1,"^1?",false,"^X",126,"^1@","^R","^Z",126,"^1C",2,"^1D",true,"^16",["^17",["^18",["^17",[["^1H","^1I"]]]]],"^1:","Create a map qualifier node.\n   The map qualifier node is a child node of [[namespaced-map-node]].\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   ;; qualified\n   (-> (n/map-qualifier-node false \"my-prefix\")\n       n/string)\n   ;; => \":my-prefix\"\n\n   ;; auto-resolved to current ns\n   (-> (n/map-qualifier-node true nil)\n       n/string)\n   ;; => \"::\"\n\n   ;; auto-resolve to namespace with alias\n   (-> (n/map-qualifier-node true \"my-ns-alias\")\n       n/string)\n   ;; => \"::my-ns-alias\"\n   ```"],"~$map->NamespacedMapNode",["^ ","^13",null,"^14",["^ ","^S","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/namespaced_map.cljc","^T",29,"^V",12,"^W",true,"^1F","~:map","^X",96,"^Z",96,"^16",["^17",["^18",["^17",[["~$G__2926"]]]]],"^1:","Factory function for rewrite-clj.node.namespaced-map/NamespacedMapNode, taking a map of keywords to field values."],"^5","~$rewrite-clj.node.namespaced-map/map->NamespacedMapNode","^S","out/rewrite_clj/node/namespaced_map.cljc","^T",29,"^1<",["^17",[["^1S"]]],"^1=",null,"^1>",["^17",[null,null]],"^V",1,"^W",true,"^1?",false,"^1F","^1R","^X",96,"^1@","~$rewrite-clj.node.namespaced-map/NamespacedMapNode","^Z",96,"^1C",1,"^1D",true,"^16",["^17",["^18",["^17",[["^1S"]]]]],"^1:","Factory function for rewrite-clj.node.namespaced-map/NamespacedMapNode, taking a map of keywords to field values."],"~$map->MapQualifierNode",["^ ","^13",null,"^14",["^ ","^S","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/namespaced_map.cljc","^T",28,"^V",12,"^W",true,"^1F","^1R","^X",6,"^Z",6,"^16",["^17",["^18",["^17",[["~$G__2899"]]]]],"^1:","Factory function for rewrite-clj.node.namespaced-map/MapQualifierNode, taking a map of keywords to field values."],"^5","~$rewrite-clj.node.namespaced-map/map->MapQualifierNode","^S","out/rewrite_clj/node/namespaced_map.cljc","^T",28,"^1<",["^17",[["^1W"]]],"^1=",null,"^1>",["^17",[null,null]],"^V",1,"^W",true,"^1?",false,"^1F","^1R","^X",6,"^1@","^R","^Z",6,"^1C",1,"^1D",true,"^16",["^17",["^18",["^17",[["^1W"]]]]],"^1:","Factory function for rewrite-clj.node.namespaced-map/MapQualifierNode, taking a map of keywords to field values."],"~$namespaced-map-node",["^ ","^13",null,"^14",["^ ","^S","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/namespaced_map.cljc","^X",151,"^V",7,"^Z",151,"^T",26,"^16",["^17",["^18",["^17",[["^19"]]]]],"^1:","Create a namespaced map node with `children`.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/namespaced-map-node [(n/map-qualifier-node true \"my-ns-alias\")\n                               (n/spaces 1)\n                               (n/map-node [(n/keyword-node :a)\n                                            (n/spaces 1)\n                                            (n/token-node 1)])])\n       n/string)\n   ;; => \"#::my-ns-alias {:a 1}\"\n   ```\n\n   Map qualifier context is automatically applied to map keys for sexpr support.\n\n   See also [[map-qualifier-node]] and [[map-node]]."],"^5","~$rewrite-clj.node.namespaced-map/namespaced-map-node","^S","out/rewrite_clj/node/namespaced_map.cljc","^T",26,"^1<",["^17",[["^19"]]],"^1=",null,"^1>",["^17",[null,null]],"^V",1,"^1?",false,"^X",151,"^1@","^1U","^Z",151,"^1C",1,"^1D",true,"^16",["^17",["^18",["^17",[["^19"]]]]],"^1:","Create a namespaced map node with `children`.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/namespaced-map-node [(n/map-qualifier-node true \"my-ns-alias\")\n                               (n/spaces 1)\n                               (n/map-node [(n/keyword-node :a)\n                                            (n/spaces 1)\n                                            (n/token-node 1)])])\n       n/string)\n   ;; => \"#::my-ns-alias {:a 1}\"\n   ```\n\n   Map qualifier context is automatically applied to map keys for sexpr support.\n\n   See also [[map-qualifier-node]] and [[map-node]]."],"~$apply-context",["^ ","^13",null,"^14",["^ ","^S","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/namespaced_map.cljc","^X",70,"^V",8,"^Z",70,"^T",21,"^15",true,"^16",["^17",["^18",["^17",[["^19"]]]]]],"^15",true,"^5","~$rewrite-clj.node.namespaced-map/apply-context","^S","out/rewrite_clj/node/namespaced_map.cljc","^T",21,"^1<",["^17",[["^19"]]],"^1=",null,"^1>",["^17",[null,null]],"^V",1,"^1?",false,"^X",70,"^1@","~$cljs.core/LazySeq","^Z",70,"^1C",1,"^1D",true,"^16",["^17",["^18",["^17",[["^19"]]]]]],"~$apply-context-to-map",["^ ","^13",null,"^14",["^ ","^S","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/namespaced_map.cljc","^X",56,"^V",8,"^Z",56,"^T",28,"^15",true,"^16",["^17",["^18",["^17",[["~$m-node","~$q-node"]]]]],"^1:","Apply the context of the qualified map to the keyword keys in the map.\n\n  Strips context from keyword-nodes not in keyword position and adds context to keyword nodes in keyword position."],"^15",true,"^5","~$rewrite-clj.node.namespaced-map/apply-context-to-map","^S","out/rewrite_clj/node/namespaced_map.cljc","^T",28,"^1<",["^17",[["^23","^24"]]],"^1=",null,"^1>",["^17",[null,null]],"^V",1,"^1?",false,"^X",56,"^1@","^1N","^Z",56,"^1C",2,"^1D",true,"^16",["^17",["^18",["^17",[["^23","^24"]]]]],"^1:","Apply the context of the qualified map to the keyword keys in the map.\n\n  Strips context from keyword-nodes not in keyword position and adds context to keyword nodes in keyword position."],"~$NamespacedMapNode",["^ ","^?",1,"^@",["^4",["^A","^B","^C","^D","^E","^F","^G","~$rewrite-clj.node.protocols/InnerNode","^H","^I","^J","^K","^L","^M","^N","^O","^P","^Q"]],"^5","^1U","^S","out/rewrite_clj/node/namespaced_map.cljc","^T",29,"^U",true,"^V",12,"^W",true,"^X",96,"^Y",true,"^Z",96,"^[","^10","^11",["^4",["^A","^B","^C","^D","^E","^G","^H","^I","^J","^K","^L","^N","^O","^P","^Q"]]],"~$->NamespacedMapNode",["^ ","^13",null,"^14",["^ ","^S","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/namespaced_map.cljc","^T",29,"^V",12,"^W",true,"^1F","^1G","^X",96,"^Z",96,"^16",["^17",["^18",["^17",[["^19"]]]]],"^1:","Positional factory function for rewrite-clj.node.namespaced-map/NamespacedMapNode."],"^5","~$rewrite-clj.node.namespaced-map/->NamespacedMapNode","^S","out/rewrite_clj/node/namespaced_map.cljc","^T",29,"^1<",["^17",[["^19"]]],"^1=",null,"^1>",["^17",[null,null]],"^V",1,"^W",true,"^1?",false,"^1F","^1G","^X",96,"^1@","^1U","^Z",96,"^1C",1,"^1D",true,"^16",["^17",["^18",["^17",[["^19"]]]]],"^1:","Positional factory function for rewrite-clj.node.namespaced-map/NamespacedMapNode."],"~$reapply-namespaced-map-context",["^ ","^13",null,"^14",["^ ","^S","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/namespaced_map.cljc","^X",76,"^V",7,"^Z",76,"^T",37,"^16",["^17",["^18",["^17",[["~$n"]]]]],"^1:","Namespaced map qualifier context is automatically applied to keyword children of contained map automatically on:\n  - [[node/namespaced-map-node]] creation (i.e. at parse time)\n  - [[node/replace-children]]\n\n  If you make changes outside these techniques, call this function to reapply the qualifier context.\n\n  This is only necessary if you need `sexpr` on map keywords to reflect the namespaced map qualifier.\n\n  Returns `n` if not a namespaced map node."],"^5","~$rewrite-clj.node.namespaced-map/reapply-namespaced-map-context","^S","out/rewrite_clj/node/namespaced_map.cljc","^T",37,"^1<",["^17",[["~$n"]]],"^1=",null,"^1>",["^17",[null,null]],"^V",1,"^1?",false,"^X",76,"^1@",["^4",[null,"^1N"]],"^Z",76,"^1C",1,"^1D",true,"^16",["^17",["^18",["^17",[["~$n"]]]]],"^1:","Namespaced map qualifier context is automatically applied to keyword children of contained map automatically on:\n  - [[node/namespaced-map-node]] creation (i.e. at parse time)\n  - [[node/replace-children]]\n\n  If you make changes outside these techniques, call this function to reapply the qualifier context.\n\n  This is only necessary if you need `sexpr` on map keywords to reflect the namespaced map qualifier.\n\n  Returns `n` if not a namespaced map node."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:auto-resolved?","~:children","~:namespaced-map","~:map-qualifier","^1H","^19","~:prefix","~:current","^1I","~:auto-resolve"]],"~:order",["^2@","^2D","^2C","^2F","^2E","^1H","^1I","^2B","^2A","^19"]],"^1:",null,"~:as-aliases",["^ "]]
["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$rewrite-clj.node.meta","~:imports",null,"~:requires",["^ ","~$interop","~$rewrite-clj.interop","^:","^:","~$node","~$rewrite-clj.node.protocols","^<","^<","~$ws","~$rewrite-clj.node.whitespace","^>","^>"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$MetaNode",["^ ","~:num-fields",3,"~:protocols",["^4",["~$cljs.core/IRecord","~$rewrite-clj.node.meta/Object","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$rewrite-clj.node.protocols/InnerNode","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$rewrite-clj.node.protocols/Node","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^5","~$rewrite-clj.node.meta/MetaNode","~:file","out/rewrite_clj/node/meta.cljc","~:end-column",20,"~:type",true,"~:column",12,"~:internal-ctor",true,"~:line",10,"~:record",true,"~:end-line",10,"~:tag","~$function","~:skip-protocol-flag",["^4",["^E","^G","^H","^I","^J","^K","^M","^N","^O","^P","^Q","^S","^T","^U","^V"]]],"~$->MetaNode",["^ ","~:protocol-inline",null,"~:meta",["^ ","^X","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/meta.cljc","^Y",20,"^[",12,"^10",true,"~:factory","~:positional","^11",10,"^13",10,"~:arglists",["~#list",["~$quote",["^1=",[["~$tag","~$prefix","~$children"]]]]],"~:doc","Positional factory function for rewrite-clj.node.meta/MetaNode."],"^5","~$rewrite-clj.node.meta/->MetaNode","^X","out/rewrite_clj/node/meta.cljc","^Y",20,"~:method-params",["^1=",[["^1?","^1@","^1A"]]],"~:protocol-impl",null,"~:arglists-meta",["^1=",[null,null]],"^[",1,"^10",true,"~:variadic?",false,"^1:","^1;","^11",10,"~:ret-tag","^W","^13",10,"~:max-fixed-arity",3,"~:fn-var",true,"^1<",["^1=",["^1>",["^1=",[["^1?","^1@","^1A"]]]]],"^1B","Positional factory function for rewrite-clj.node.meta/MetaNode."],"~$map->MetaNode",["^ ","^18",null,"^19",["^ ","^X","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/meta.cljc","^Y",20,"^[",12,"^10",true,"^1:","~:map","^11",10,"^13",10,"^1<",["^1=",["^1>",["^1=",[["~$G__2679"]]]]],"^1B","Factory function for rewrite-clj.node.meta/MetaNode, taking a map of keywords to field values."],"^5","~$rewrite-clj.node.meta/map->MetaNode","^X","out/rewrite_clj/node/meta.cljc","^Y",20,"^1D",["^1=",[["^1M"]]],"^1E",null,"^1F",["^1=",[null,null]],"^[",1,"^10",true,"^1G",false,"^1:","^1L","^11",10,"^1H","^W","^13",10,"^1I",1,"^1J",true,"^1<",["^1=",["^1>",["^1=",[["^1M"]]]]],"^1B","Factory function for rewrite-clj.node.meta/MetaNode, taking a map of keywords to field values."],"~$meta-node",["^ ","^18",null,"^19",["^ ","^X","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/meta.cljc","^11",42,"^[",7,"^13",42,"^Y",16,"^1<",["^1=",["^1>",["^1=",[["^1A"],["~$metadata","~$data"]]]]],"^1B","Create a node representing a form with metadata.\n\n   When creating manually, you can specify `metadata` and `data` and spacing between the 2 elems will be included:\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/meta-node (n/keyword-node :foo)\n                    (n/vector-node [(n/token-node 1)]))\n       n/string)\n   ;; => \"^:foo [1]\"\n\n   (-> (n/meta-node (n/map-node [:foo (n/spaces 1) 42])\n                    (n/vector-node [(n/token-node 1)]))\n       n/string)\n   ;; => \"^{:foo 42} [1]\"\n   ```\n   When specifying a sequence of `children`, spacing is explicit:\n\n   ```Clojure\n   (-> (n/meta-node [(n/keyword-node :foo)\n                     (n/spaces 1)\n                     (n/vector-node [(n/token-node 1)])])\n       n/string)\n   ;; => \"^:foo [1]\"\n   ```\n   See also: [[raw-meta-node]]","~:top-fn",["^ ","^1G",false,"~:fixed-arity",2,"^1I",2,"^1D",[["^1A"],["^1P","^1Q"]],"^1<",["^1=",[["^1A"],["^1P","^1Q"]]],"^1F",["^1=",[null,null]]]],"^5","~$rewrite-clj.node.meta/meta-node","^X","out/rewrite_clj/node/meta.cljc","^Y",16,"^1R",["^ ","^1G",false,"^1S",2,"^1I",2,"^1D",[["^1A"],["^1P","^1Q"]],"^1<",["^1=",[["^1A"],["^1P","^1Q"]]],"^1F",["^1=",[null,null]]],"^1D",[["^1A"],["^1P","^1Q"]],"^1E",null,"^1S",2,"^1F",["^1=",[null,null]],"^[",1,"^1G",false,"~:methods",[["^ ","^1S",1,"^1G",false,"^14","^W"],["^ ","^1S",2,"^1G",false,"^14","^W"]],"^11",42,"^13",42,"^1I",2,"^1J",true,"^1<",["^1=",[["^1A"],["^1P","^1Q"]]],"^1B","Create a node representing a form with metadata.\n\n   When creating manually, you can specify `metadata` and `data` and spacing between the 2 elems will be included:\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/meta-node (n/keyword-node :foo)\n                    (n/vector-node [(n/token-node 1)]))\n       n/string)\n   ;; => \"^:foo [1]\"\n\n   (-> (n/meta-node (n/map-node [:foo (n/spaces 1) 42])\n                    (n/vector-node [(n/token-node 1)]))\n       n/string)\n   ;; => \"^{:foo 42} [1]\"\n   ```\n   When specifying a sequence of `children`, spacing is explicit:\n\n   ```Clojure\n   (-> (n/meta-node [(n/keyword-node :foo)\n                     (n/spaces 1)\n                     (n/vector-node [(n/token-node 1)])])\n       n/string)\n   ;; => \"^:foo [1]\"\n   ```\n   See also: [[raw-meta-node]]"],"~$raw-meta-node",["^ ","^18",null,"^19",["^ ","^X","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/meta.cljc","^11",76,"^[",7,"^13",76,"^Y",20,"^1<",["^1=",["^1>",["^1=",[["^1A"],["^1P","^1Q"]]]]],"^1B","Create a node representing a form with metadata that renders to the reader syntax.\n\n   When creating manually, you can specify `metadata` and `data` and spacing between the 2 elems will be included:\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/raw-meta-node (n/keyword-node :foo)\n                        (n/vector-node [(n/token-node 2)]))\n        n/string)\n   ;; => \"#^:foo [2]\"\n\n   (-> (n/raw-meta-node (n/map-node [:foo (n/spaces 1) 42])\n                        (n/vector-node [(n/token-node 2)]))\n       n/string)\n   ;; => \"#^{:foo 42} [2]\"\n   ```\n   When specifying a sequence of `children`, spacing is explicit:\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/raw-meta-node [(n/keyword-node :foo)\n                         (n/spaces 1)\n                         (n/vector-node [(n/token-node 2)])])\n       n/string)\n   ;; => \"#^:foo [2]\"\n   ```\n   See also: [[meta-node]]","^1R",["^ ","^1G",false,"^1S",2,"^1I",2,"^1D",[["^1A"],["^1P","^1Q"]],"^1<",["^1=",[["^1A"],["^1P","^1Q"]]],"^1F",["^1=",[null,null]]]],"^5","~$rewrite-clj.node.meta/raw-meta-node","^X","out/rewrite_clj/node/meta.cljc","^Y",20,"^1R",["^ ","^1G",false,"^1S",2,"^1I",2,"^1D",[["^1A"],["^1P","^1Q"]],"^1<",["^1=",[["^1A"],["^1P","^1Q"]]],"^1F",["^1=",[null,null]]],"^1D",[["^1A"],["^1P","^1Q"]],"^1E",null,"^1S",2,"^1F",["^1=",[null,null]],"^[",1,"^1G",false,"^1U",[["^ ","^1S",1,"^1G",false,"^14","^W"],["^ ","^1S",2,"^1G",false,"^14","^W"]],"^11",76,"^13",76,"^1I",2,"^1J",true,"^1<",["^1=",[["^1A"],["^1P","^1Q"]]],"^1B","Create a node representing a form with metadata that renders to the reader syntax.\n\n   When creating manually, you can specify `metadata` and `data` and spacing between the 2 elems will be included:\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/raw-meta-node (n/keyword-node :foo)\n                        (n/vector-node [(n/token-node 2)]))\n        n/string)\n   ;; => \"#^:foo [2]\"\n\n   (-> (n/raw-meta-node (n/map-node [:foo (n/spaces 1) 42])\n                        (n/vector-node [(n/token-node 2)]))\n       n/string)\n   ;; => \"#^{:foo 42} [2]\"\n   ```\n   When specifying a sequence of `children`, spacing is explicit:\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/raw-meta-node [(n/keyword-node :foo)\n                         (n/spaces 1)\n                         (n/vector-node [(n/token-node 2)])])\n       n/string)\n   ;; => \"#^:foo [2]\"\n   ```\n   See also: [[meta-node]]"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^=","^>","^>","^>"],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["^1?","~:children","^19","^1A","~:meta*","~:prefix","^1@","^14"]],"~:order",["^14","^22","^20","^19","^1?","^1@","^1A","^21"]],"^1B",null,"~:as-aliases",["^ "]]
["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$rewrite-clj.node.forms","~:imports",null,"~:requires",["^ ","~$node","~$rewrite-clj.node.protocols","^:","^:"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$FormsNode",["^ ","~:num-fields",1,"~:protocols",["^4",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$rewrite-clj.node.protocols/InnerNode","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$rewrite-clj.node.forms/Object","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$rewrite-clj.node.protocols/Node","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^5","~$rewrite-clj.node.forms/FormsNode","~:file","out/rewrite_clj/node/forms.cljc","~:end-column",21,"~:type",true,"~:column",12,"~:internal-ctor",true,"~:line",8,"~:record",true,"~:end-line",8,"~:tag","~$function","~:skip-protocol-flag",["^4",["^A","^B","^C","^D","^E","^F","^H","^I","^J","^L","^M","^O","^P","^Q","^R"]]],"~$->FormsNode",["^ ","~:protocol-inline",null,"~:meta",["^ ","^T","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/forms.cljc","^U",21,"^W",12,"^X",true,"~:factory","~:positional","^Y",8,"^[",8,"~:arglists",["~#list",["~$quote",["^19",[["~$children"]]]]],"~:doc","Positional factory function for rewrite-clj.node.forms/FormsNode."],"^5","~$rewrite-clj.node.forms/->FormsNode","^T","out/rewrite_clj/node/forms.cljc","^U",21,"~:method-params",["^19",[["^1;"]]],"~:protocol-impl",null,"~:arglists-meta",["^19",[null,null]],"^W",1,"^X",true,"~:variadic?",false,"^16","^17","^Y",8,"~:ret-tag","^S","^[",8,"~:max-fixed-arity",1,"~:fn-var",true,"^18",["^19",["^1:",["^19",[["^1;"]]]]],"^1<","Positional factory function for rewrite-clj.node.forms/FormsNode."],"~$map->FormsNode",["^ ","^14",null,"^15",["^ ","^T","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/forms.cljc","^U",21,"^W",12,"^X",true,"^16","~:map","^Y",8,"^[",8,"^18",["^19",["^1:",["^19",[["~$G__3009"]]]]],"^1<","Factory function for rewrite-clj.node.forms/FormsNode, taking a map of keywords to field values."],"^5","~$rewrite-clj.node.forms/map->FormsNode","^T","out/rewrite_clj/node/forms.cljc","^U",21,"^1>",["^19",[["^1G"]]],"^1?",null,"^1@",["^19",[null,null]],"^W",1,"^X",true,"^1A",false,"^16","^1F","^Y",8,"^1B","^S","^[",8,"^1C",1,"^1D",true,"^18",["^19",["^1:",["^19",[["^1G"]]]]],"^1<","Factory function for rewrite-clj.node.forms/FormsNode, taking a map of keywords to field values."],"~$forms-node",["^ ","^14",null,"^15",["^ ","^T","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/forms.cljc","^Y",38,"^W",7,"^[",38,"^U",17,"^18",["^19",["^1:",["^19",[["^1;"]]]]],"^1<","Create top-level node wrapping multiple `children`.\n   The forms node is equivalent to an implicit `do` at the top-level.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/forms-node [(n/token-node 1)\n                      (n/spaces 1)\n                      (n/token-node 2)])\n       n/string)\n   ;; => \"1 2\"\n   ```\n   "],"^5","~$rewrite-clj.node.forms/forms-node","^T","out/rewrite_clj/node/forms.cljc","^U",17,"^1>",["^19",[["^1;"]]],"^1?",null,"^1@",["^19",[null,null]],"^W",1,"^1A",false,"^Y",38,"^1B","^S","^[",38,"^1C",1,"^1D",true,"^18",["^19",["^1:",["^19",[["^1;"]]]]],"^1<","Create top-level node wrapping multiple `children`.\n   The forms node is equivalent to an implicit `do` at the top-level.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/forms-node [(n/token-node 1)\n                      (n/spaces 1)\n                      (n/token-node 2)])\n       n/string)\n   ;; => \"1 2\"\n   ```\n   "]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:children","^1;","~$do","~:forms"]],"~:order",["^1O","^1Q","^1P","^1;"]],"^1<",null,"~:as-aliases",["^ "]]
["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Function",["^ ","~$prototype",["^ ","^4",["^ ","~$rewrite-clj$node$protocols$NodeCoerceable$",["^ "],"~$rewrite-clj$node$protocols$NodeCoerceable$coerce$arity$1",["^ "]]]]],"~:use-macros",["^ ","~$var-node","~$rewrite-clj.node.reader-macro","~$vector-node","~$rewrite-clj.node.seq","~$pattern-string-for-regex","~$rewrite-clj.node.regex","~$string-node","~$rewrite-clj.node.stringz","~$meta-node","~$rewrite-clj.node.meta","~$regex-node","^=","~$list-node","^;","~$map-node","^;","~$reader-macro-node","^9","~$set-node","^;","~$keyword-node","~$rewrite-clj.node.keyword","~$NodeCoerceable","~$rewrite-clj.node.protocols","~$token-node","~$rewrite-clj.node.token","~$coerce","^J"],"~:excludes",["~#set",[]],"~:name","~$rewrite-clj.node.coercer","~:imports",null,"~:requires",["^ ","^?","^?","^A","^A","~$rewrite-clj.node.integer","^T","^L","^L","^;","^;","~$ws","~$rewrite-clj.node.whitespace","~$rewrite-clj.node.fn","^W","^9","^9","^H","^H","~$rewrite-clj.node.comment","^X","~$rewrite-clj.node.quote","^Y","~$string","~$clojure.string","~$node","^J","^J","^J","^[","^[","~$rewrite-clj.node.uneval","^11","^=","^=","^V","^V","~$rewrite-clj.node.namespaced-map","^12","~$rewrite-clj.node.forms","^13"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$WhitespaceNode","^V","~$TokenNode","^L","~$RegexNode","^=","~$MapQualifierNode","^12","~$MetaNode","^A","^8","^9","^:","^;","^<","^=","~$DerefNode","^9","~$IntNode","^T","~$StringNode","^?","~$KeywordNode","^H","~$CommaNode","^V","^>","^?","^@","^A","~$NewlineNode","^V","~$UnevalNode","^11","^B","^=","~$ReaderMacroNode","^9","^C","^;","~$FormsNode","^13","~$SymbolNode","^L","^D","^;","~$NamespacedMapNode","^12","^E","^9","^F","^;","^G","^H","~$CommentNode","^X","~$SeqNode","^;","~$QuoteNode","^Y","^I","^J","~$ReaderNode","^9","~$FnNode","^W","^K","^L","^M","^J"],"~:defs",["^ ","~$split-to-lines",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/coercer.cljc","~:line",93,"~:column",8,"~:end-line",93,"~:end-column",22,"~:private",true,"~:arglists",["~#list",["~$quote",["^1V",[["~$s"]]]]],"~:doc","Slightly different than string/split-lines in that:\n   - escape inline double quotes (to emulate the clojure reader)\n   - includes all lines even if empty\n   - behaves the same on clj and cljs"],"^1T",true,"^P","~$rewrite-clj.node.coercer/split-to-lines","^1O","out/rewrite_clj/node/coercer.cljc","^1S",22,"~:method-params",["^1V",[["~$s"]]],"~:protocol-impl",null,"~:arglists-meta",["^1V",[null,null]],"^1Q",1,"~:variadic?",false,"^1P",93,"~:ret-tag","~$clj","^1R",93,"~:max-fixed-arity",1,"~:fn-var",true,"^1U",["^1V",["^1W",["^1V",[["~$s"]]]]],"^1X","Slightly different than string/split-lines in that:\n   - escape inline double quotes (to emulate the clojure reader)\n   - includes all lines even if empty\n   - behaves the same on clj and cljs"],"~$node-with-meta",["^ ","^1M",null,"^1N",["^ ","^1O","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/coercer.cljc","^1P",107,"^1Q",7,"^1R",107,"^1S",21,"^1U",["^1V",["^1W",["^1V",[["~$n","~$value"]]]]]],"^P","~$rewrite-clj.node.coercer/node-with-meta","^1O","out/rewrite_clj/node/coercer.cljc","^1S",21,"^1Z",["^1V",[["~$n","^27"]]],"^1[",null,"^20",["^1V",[null,null]],"^1Q",1,"^21",false,"^1P",107,"^22",["^O",[null,"~$rewrite-clj.node.meta/MetaNode"]],"^1R",107,"^24",2,"^25",true,"^1U",["^1V",["^1W",["^1V",[["~$n","^27"]]]]]],"~$map->children",["^ ","^1M",null,"^1N",["^ ","^1O","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/coercer.cljc","^1P",119,"^1Q",10,"^1R",119,"^1S",23,"^1T",true,"^1U",["^1V",["^1W",["^1V",[["~$m"]]]]]],"^1T",true,"^P","~$rewrite-clj.node.coercer/map->children","^1O","out/rewrite_clj/node/coercer.cljc","^1S",23,"^1Z",["^1V",[["~$m"]]],"^1[",null,"^20",["^1V",[null,null]],"^1Q",3,"^21",false,"^1P",119,"^22",["^O",["^23","~$cljs.core/IVector","~$any","~$cljs.core/MetaFn","~$clj-nil"]],"^1R",119,"^24",1,"^25",true,"^1U",["^1V",["^1W",["^1V",[["~$m"]]]]]],"~$record-node",["^ ","^1M",null,"^1N",["^ ","^1O","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/coercer.cljc","^1P",128,"^1Q",8,"^1R",128,"^1S",19,"^1T",true,"^1U",["^1V",["^1W",["^1V",[["~$m"]]]]]],"^1T",true,"^P","~$rewrite-clj.node.coercer/record-node","^1O","out/rewrite_clj/node/coercer.cljc","^1S",19,"^1Z",["^1V",[["~$m"]]],"^1[",null,"^20",["^1V",[null,null]],"^1Q",1,"^21",false,"^1P",128,"^22","~$rewrite-clj.node.reader-macro/ReaderMacroNode","^1R",128,"^24",1,"^25",true,"^1U",["^1V",["^1W",["^1V",[["~$m"]]]]]],"~$create-map-node",["^ ","^1M",null,"^1N",["^ ","^1O","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/coercer.cljc","^1P",138,"^1Q",8,"^1R",138,"^1S",23,"^1T",true,"^1U",["^1V",["^1W",["^1V",[["~$children"]]]]]],"^1T",true,"^P","~$rewrite-clj.node.coercer/create-map-node","^1O","out/rewrite_clj/node/coercer.cljc","^1S",23,"^1Z",["^1V",[["^2D"]]],"^1[",null,"^20",["^1V",[null,null]],"^1Q",1,"^21",false,"^1P",138,"^22",["^O",[null,"^29"]],"^1R",138,"^24",1,"^25",true,"^1U",["^1V",["^1W",["^1V",[["^2D"]]]]]],"~$seq-node",["^ ","^1M",null,"^1N",["^ ","^1O","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/coercer.cljc","^1P",187,"^1Q",8,"^1R",187,"^1S",16,"^1T",true,"^1U",["^1V",["^1W",["^1V",[["~$f","~$sq"]]]]]],"^1T",true,"^P","~$rewrite-clj.node.coercer/seq-node","^1O","out/rewrite_clj/node/coercer.cljc","^1S",16,"^1Z",["^1V",[["~$f","^2G"]]],"^1[",null,"^20",["^1V",[null,null]],"^1Q",1,"^21",false,"^1P",187,"^22",["^O",[null,"^29"]],"^1R",187,"^24",2,"^25",true,"^1U",["^1V",["^1W",["^1V",[["~$f","^2G"]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^U","^V","^V","^V"],"^1X","Notes:\n   - Coercion of records handled specially due different behaviors on different JVMs.\n     Must be in equality of specificity of in our protocol extensions.\n\n     From https://clojure.org/reference/protocols:\n\n       if one interface is derived from the other, the more derived is used,\n       else which one is used is unspecified","~:as-aliases",["^ "]]
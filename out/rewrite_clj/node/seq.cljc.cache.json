["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$rewrite-clj.node.seq","~:imports",null,"~:requires",["^ ","~$interop","~$rewrite-clj.interop","^:","^:","~$node","~$rewrite-clj.node.protocols","^<","^<"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$SeqNode",["^ ","~:num-fields",5,"~:protocols",["^4",["~$cljs.core/IRecord","~$rewrite-clj.node.seq/Object","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$rewrite-clj.node.protocols/InnerNode","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$rewrite-clj.node.protocols/Node","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^5","~$rewrite-clj.node.seq/SeqNode","~:file","out/rewrite_clj/node/seq.cljc","~:end-column",19,"~:type",true,"~:column",12,"~:internal-ctor",true,"~:line",9,"~:record",true,"~:end-line",9,"~:tag","~$function","~:skip-protocol-flag",["^4",["^C","^E","^F","^G","^H","^I","^K","^L","^M","^N","^O","^Q","^R","^S","^T"]]],"~$->SeqNode",["^ ","~:protocol-inline",null,"~:meta",["^ ","^V","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/seq.cljc","^W",19,"^Y",12,"^Z",true,"~:factory","~:positional","^[",9,"^11",9,"~:arglists",["~#list",["~$quote",["^1;",[["~$tag","~$format-string","~$wrap-length","~$seq-fn","~$children"]]]]],"~:doc","Positional factory function for rewrite-clj.node.seq/SeqNode."],"^5","~$rewrite-clj.node.seq/->SeqNode","^V","out/rewrite_clj/node/seq.cljc","^W",19,"~:method-params",["^1;",[["^1=","^1>","^1?","^1@","^1A"]]],"~:protocol-impl",null,"~:arglists-meta",["^1;",[null,null]],"^Y",1,"^Z",true,"~:variadic?",false,"^18","^19","^[",9,"~:ret-tag","^U","^11",9,"~:max-fixed-arity",5,"~:fn-var",true,"^1:",["^1;",["^1<",["^1;",[["^1=","^1>","^1?","^1@","^1A"]]]]],"^1B","Positional factory function for rewrite-clj.node.seq/SeqNode."],"~$map->SeqNode",["^ ","^16",null,"^17",["^ ","^V","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/seq.cljc","^W",19,"^Y",12,"^Z",true,"^18","~:map","^[",9,"^11",9,"^1:",["^1;",["^1<",["^1;",[["~$G__2762"]]]]],"^1B","Factory function for rewrite-clj.node.seq/SeqNode, taking a map of keywords to field values."],"^5","~$rewrite-clj.node.seq/map->SeqNode","^V","out/rewrite_clj/node/seq.cljc","^W",19,"^1D",["^1;",[["^1M"]]],"^1E",null,"^1F",["^1;",[null,null]],"^Y",1,"^Z",true,"^1G",false,"^18","^1L","^[",9,"^1H","^U","^11",9,"^1I",1,"^1J",true,"^1:",["^1;",["^1<",["^1;",[["^1M"]]]]],"^1B","Factory function for rewrite-clj.node.seq/SeqNode, taking a map of keywords to field values."],"~$list-node",["^ ","^16",null,"^17",["^ ","^V","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/seq.cljc","^[",42,"^Y",7,"^11",42,"^W",16,"^1:",["^1;",["^1<",["^1;",[["^1A"]]]]],"^1B","Create a node representing a list with `children`.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/list-node [(n/token-node 1)\n                     (n/spaces 1)\n                     (n/token-node 2)\n                     (n/spaces 1)\n                     (n/token-node 3)])\n       n/string)\n   ;; => \"(1 2 3)\"\n   ```"],"^5","~$rewrite-clj.node.seq/list-node","^V","out/rewrite_clj/node/seq.cljc","^W",16,"^1D",["^1;",[["^1A"]]],"^1E",null,"^1F",["^1;",[null,null]],"^Y",1,"^1G",false,"^[",42,"^1H","^U","^11",42,"^1I",1,"^1J",true,"^1:",["^1;",["^1<",["^1;",[["^1A"]]]]],"^1B","Create a node representing a list with `children`.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/list-node [(n/token-node 1)\n                     (n/spaces 1)\n                     (n/token-node 2)\n                     (n/spaces 1)\n                     (n/token-node 3)])\n       n/string)\n   ;; => \"(1 2 3)\"\n   ```"],"~$vector-node",["^ ","^16",null,"^17",["^ ","^V","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/seq.cljc","^[",59,"^Y",7,"^11",59,"^W",18,"^1:",["^1;",["^1<",["^1;",[["^1A"]]]]],"^1B","Create a node representing a vector with `children`.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/vector-node [(n/token-node 1)\n                       (n/spaces 1)\n                       (n/token-node 2)\n                       (n/spaces 1)\n                       (n/token-node 3)])\n       n/string)\n   ;; => \"[1 2 3]\"\n   ```"],"^5","~$rewrite-clj.node.seq/vector-node","^V","out/rewrite_clj/node/seq.cljc","^W",18,"^1D",["^1;",[["^1A"]]],"^1E",null,"^1F",["^1;",[null,null]],"^Y",1,"^1G",false,"^[",59,"^1H","^U","^11",59,"^1I",1,"^1J",true,"^1:",["^1;",["^1<",["^1;",[["^1A"]]]]],"^1B","Create a node representing a vector with `children`.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/vector-node [(n/token-node 1)\n                       (n/spaces 1)\n                       (n/token-node 2)\n                       (n/spaces 1)\n                       (n/token-node 3)])\n       n/string)\n   ;; => \"[1 2 3]\"\n   ```"],"~$set-node",["^ ","^16",null,"^17",["^ ","^V","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/seq.cljc","^[",76,"^Y",7,"^11",76,"^W",15,"^1:",["^1;",["^1<",["^1;",[["^1A"]]]]],"^1B","Create a node representing a set with `children`.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/set-node [(n/token-node 1)\n                    (n/spaces 1)\n                    (n/token-node 2)\n                    (n/spaces 1)\n                    (n/token-node 3)])\n       n/string)\n   ;; => \"#{1 2 3}\"\n   ```\n\n   Note that rewrite-clj allows the, technically illegal, set with duplicate values:\n   ```Clojure\n   (-> (n/set-node [(n/token-node 1)\n                    (n/spaces 1)\n                    (n/token-node 1)])\n       (n/string))\n   ;; => \"#{1 1}\"\n   ```\n\n   See [docs on sets with duplicate values](/doc/01-user-guide.adoc#sets-with-duplicate-values)."],"^5","~$rewrite-clj.node.seq/set-node","^V","out/rewrite_clj/node/seq.cljc","^W",15,"^1D",["^1;",[["^1A"]]],"^1E",null,"^1F",["^1;",[null,null]],"^Y",1,"^1G",false,"^[",76,"^1H","^U","^11",76,"^1I",1,"^1J",true,"^1:",["^1;",["^1<",["^1;",[["^1A"]]]]],"^1B","Create a node representing a set with `children`.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/set-node [(n/token-node 1)\n                    (n/spaces 1)\n                    (n/token-node 2)\n                    (n/spaces 1)\n                    (n/token-node 3)])\n       n/string)\n   ;; => \"#{1 2 3}\"\n   ```\n\n   Note that rewrite-clj allows the, technically illegal, set with duplicate values:\n   ```Clojure\n   (-> (n/set-node [(n/token-node 1)\n                    (n/spaces 1)\n                    (n/token-node 1)])\n       (n/string))\n   ;; => \"#{1 1}\"\n   ```\n\n   See [docs on sets with duplicate values](/doc/01-user-guide.adoc#sets-with-duplicate-values)."],"~$map-node",["^ ","^16",null,"^17",["^ ","^V","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/seq.cljc","^[",104,"^Y",7,"^11",104,"^W",15,"^1:",["^1;",["^1<",["^1;",[["^1A"]]]]],"^1B","Create a node representing a map with `children`.\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/map-node [(n/keyword-node :a)\n                    (n/spaces 1)\n                    (n/token-node 1)\n                    (n/spaces 1)\n                    (n/keyword-node :b)\n                    (n/spaces 1)\n                    (n/token-node 2)])\n       (n/string))\n   ;; => \"{:a 1 :b 2}\"\n   ```\n\n   Note that rewrite-clj allows the, technically illegal, unbalanced map:\n   ```Clojure\n   (-> (n/map-node [(n/keyword-node :a)])\n       (n/string))\n   ;; => \"{:a}\"\n   ```\n   See [docs on unbalanced maps](/doc/01-user-guide.adoc#unbalanced-maps).\n\n   Rewrite-clj also allows the, also technically illegal, map with duplicate keys:\n   ```Clojure\n   (-> (n/map-node [(n/keyword-node :a)\n                    (n/spaces 1)\n                    (n/token-node 1)\n                    (n/spaces 1)\n                    (n/keyword-node :a)\n                    (n/spaces 1)\n                    (n/token-node 2)])\n       (n/string))\n   ;; => \"{:a 1 :a 2}\"\n   ```\n   See [docs on maps with duplicate keys](/doc/01-user-guide.adoc#maps-with-duplicate-keys)."],"^5","~$rewrite-clj.node.seq/map-node","^V","out/rewrite_clj/node/seq.cljc","^W",15,"^1D",["^1;",[["^1A"]]],"^1E",null,"^1F",["^1;",[null,null]],"^Y",1,"^1G",false,"^[",104,"^1H","^U","^11",104,"^1I",1,"^1J",true,"^1:",["^1;",["^1<",["^1;",[["^1A"]]]]],"^1B","Create a node representing a map with `children`.\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/map-node [(n/keyword-node :a)\n                    (n/spaces 1)\n                    (n/token-node 1)\n                    (n/spaces 1)\n                    (n/keyword-node :b)\n                    (n/spaces 1)\n                    (n/token-node 2)])\n       (n/string))\n   ;; => \"{:a 1 :b 2}\"\n   ```\n\n   Note that rewrite-clj allows the, technically illegal, unbalanced map:\n   ```Clojure\n   (-> (n/map-node [(n/keyword-node :a)])\n       (n/string))\n   ;; => \"{:a}\"\n   ```\n   See [docs on unbalanced maps](/doc/01-user-guide.adoc#unbalanced-maps).\n\n   Rewrite-clj also allows the, also technically illegal, map with duplicate keys:\n   ```Clojure\n   (-> (n/map-node [(n/keyword-node :a)\n                    (n/spaces 1)\n                    (n/token-node 1)\n                    (n/spaces 1)\n                    (n/keyword-node :a)\n                    (n/spaces 1)\n                    (n/token-node 2)])\n       (n/string))\n   ;; => \"{:a 1 :a 2}\"\n   ```\n   See [docs on maps with duplicate keys](/doc/01-user-guide.adoc#maps-with-duplicate-keys)."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["^1=","^1?","~:children","^1A","~:format-string","~:vector","~:seq-fn","~:list","^1>","^1@","~:wrap-length","^12","~:seq","~:set","^1L"]],"~:order",["^12","^20","^24","^22","^1[","^25","^1=","^1>","^1?","^1@","^1A","^23","^21","^26","^1L"]],"^1B",null,"~:as-aliases",["^ "]]
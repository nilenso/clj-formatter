["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$rewrite-clj.node.keyword","~:imports",null,"~:requires",["^ ","~$node","~$rewrite-clj.node.protocols","^:","^:"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$choose-qualifier",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/keyword.cljc","~:line",8,"~:column",8,"~:end-line",8,"~:end-column",24,"~:private",true,"~:arglists",["~#list",["~$quote",["^H",[["~$map-qualifier","~$kw-qualifier"]]]]]],"^F",true,"^5","~$rewrite-clj.node.keyword/choose-qualifier","^A","out/rewrite_clj/node/keyword.cljc","^E",24,"~:method-params",["^H",[["^J","^K"]]],"~:protocol-impl",null,"~:arglists-meta",["^H",[null,null]],"^C",1,"~:variadic?",false,"^B",8,"~:ret-tag",["^4",[null,"~$clj-nil"]],"^D",8,"~:max-fixed-arity",2,"~:fn-var",true,"^G",["^H",["^I",["^H",[["^J","^K"]]]]]],"^K",["^ ","^?",null,"^@",["^ ","^A","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/keyword.cljc","^B",12,"^C",7,"^D",12,"^E",19,"^G",["^H",["^I",["^H",[["~$k","~$auto-resolved?"]]]]]],"^5","~$rewrite-clj.node.keyword/kw-qualifier","^A","out/rewrite_clj/node/keyword.cljc","^E",19,"^M",["^H",[["~$k","^U"]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^P",false,"^B",12,"^Q",["^4",["~$cljs.core/IMap","^R"]],"^D",12,"^S",2,"^T",true,"^G",["^H",["^I",["^H",[["~$k","^U"]]]]]],"~$keyword-sexpr",["^ ","^?",null,"^@",["^ ","^A","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/keyword.cljc","^B",17,"^C",7,"^D",17,"^E",20,"^G",["^H",["^I",["^H",[["~$kw","~$kw-auto-resolved?","^J",["^ ","~:keys",["~$auto-resolve"]]]]]]]],"^5","~$rewrite-clj.node.keyword/keyword-sexpr","^A","out/rewrite_clj/node/keyword.cljc","^E",20,"^M",["^H",[["^Y","^Z","^J","~$p__2647"]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^P",false,"^B",17,"^Q","~$cljs.core/Keyword","^D",17,"^S",4,"^T",true,"^G",["^H",["^I",["^H",[["^Y","^Z","^J",["^ ","^[",["^10"]]]]]]]],"~$KeywordNode",["^ ","~:num-fields",3,"~:protocols",["^4",["~$cljs.core/IRecord","~$rewrite-clj.node.protocols/MapQualifiable","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$rewrite-clj.node.keyword/Object","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$rewrite-clj.node.protocols/Node","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","^W","~$cljs.core/ILookup"]],"^5","~$rewrite-clj.node.keyword/KeywordNode","^A","out/rewrite_clj/node/keyword.cljc","^E",23,"~:type",true,"^C",12,"~:internal-ctor",true,"^B",27,"~:record",true,"^D",27,"~:tag","~$function","~:skip-protocol-flag",["^4",["^17","^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@","^1B","^1C","^1E","^1F","^W","^1G"]]],"~$->KeywordNode",["^ ","^?",null,"^@",["^ ","^A","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/keyword.cljc","^E",23,"^C",12,"^1J",true,"~:factory","~:positional","^B",27,"^D",27,"^G",["^H",["^I",["^H",[["~$k","^U","^J"]]]]],"~:doc","Positional factory function for rewrite-clj.node.keyword/KeywordNode."],"^5","~$rewrite-clj.node.keyword/->KeywordNode","^A","out/rewrite_clj/node/keyword.cljc","^E",23,"^M",["^H",[["~$k","^U","^J"]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^1J",true,"^P",false,"^1P","^1Q","^B",27,"^Q","^1H","^D",27,"^S",3,"^T",true,"^G",["^H",["^I",["^H",[["~$k","^U","^J"]]]]],"^1R","Positional factory function for rewrite-clj.node.keyword/KeywordNode."],"~$map->KeywordNode",["^ ","^?",null,"^@",["^ ","^A","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/keyword.cljc","^E",23,"^C",12,"^1J",true,"^1P","~:map","^B",27,"^D",27,"^G",["^H",["^I",["^H",[["~$G__2655"]]]]],"^1R","Factory function for rewrite-clj.node.keyword/KeywordNode, taking a map of keywords to field values."],"^5","~$rewrite-clj.node.keyword/map->KeywordNode","^A","out/rewrite_clj/node/keyword.cljc","^E",23,"^M",["^H",[["^1V"]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^1J",true,"^P",false,"^1P","^1U","^B",27,"^Q","^1H","^D",27,"^S",1,"^T",true,"^G",["^H",["^I",["^H",[["^1V"]]]]],"^1R","Factory function for rewrite-clj.node.keyword/KeywordNode, taking a map of keywords to field values."],"~$keyword-node?",["^ ","^?",null,"^@",["^ ","^A","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/keyword.cljc","^B",57,"^C",7,"^D",57,"^E",20,"^G",["^H",["^I",["^H",[["~$n"]]]]],"^1R","Returns true if `n` is a node representing a keyword."],"^5","~$rewrite-clj.node.keyword/keyword-node?","^A","out/rewrite_clj/node/keyword.cljc","^E",20,"^M",["^H",[["~$n"]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^P",false,"^B",57,"^Q","~$boolean","^D",57,"^S",1,"^T",true,"^G",["^H",["^I",["^H",[["~$n"]]]]],"^1R","Returns true if `n` is a node representing a keyword."],"~$keyword-node",["^ ","^?",null,"^@",["^ ","^A","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/keyword.cljc","^B",64,"^C",7,"^D",64,"^E",19,"^G",["^H",["^I",["^H",[["~$k","^U"],["~$k"]]]]],"^1R","Create a node representing a keyword `k`.\n\n   Optionally include `auto-resolved?`, which defaults to `false`.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   ;; unqualified keyword\n   (-> (n/keyword-node :kw)\n       n/string)\n   ;; => \":kw\"\n\n   ;; qualified keyword\n   (-> (n/keyword-node :my-prefix/kw)\n       n/string)\n   ;; => \":my-prefix/kw\"\n\n   ;; keyword auto-resolved to current ns\n   (-> (n/keyword-node :kw true)\n       n/string)\n   ;; => \"::kw\"\n\n   ;; keyword auto-resolved to a namespace with given alias\n   (-> (n/keyword-node :ns-alias/kw true)\n       n/string)\n   ;; => \"::ns-alias/kw\"\n   ```","~:top-fn",["^ ","^P",false,"~:fixed-arity",2,"^S",2,"^M",[["~$k","^U"],["~$k"]],"^G",["^H",[["~$k","^U"],["~$k"]]],"^O",["^H",[null,null]]]],"^5","~$rewrite-clj.node.keyword/keyword-node","^A","out/rewrite_clj/node/keyword.cljc","^E",19,"^20",["^ ","^P",false,"^21",2,"^S",2,"^M",[["~$k","^U"],["~$k"]],"^G",["^H",[["~$k","^U"],["~$k"]]],"^O",["^H",[null,null]]],"^M",[["~$k","^U"],["~$k"]],"^N",null,"^21",2,"^O",["^H",[null,null]],"^C",1,"^P",false,"~:methods",[["^ ","^21",2,"^P",false,"^1L","^1H"],["^ ","^21",1,"^P",false,"^1L","^1H"]],"^B",64,"^D",64,"^S",2,"^T",true,"^G",["^H",[["~$k","^U"],["~$k"]]],"^1R","Create a node representing a keyword `k`.\n\n   Optionally include `auto-resolved?`, which defaults to `false`.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   ;; unqualified keyword\n   (-> (n/keyword-node :kw)\n       n/string)\n   ;; => \":kw\"\n\n   ;; qualified keyword\n   (-> (n/keyword-node :my-prefix/kw)\n       n/string)\n   ;; => \":my-prefix/kw\"\n\n   ;; keyword auto-resolved to current ns\n   (-> (n/keyword-node :kw true)\n       n/string)\n   ;; => \"::kw\"\n\n   ;; keyword auto-resolved to a namespace with given alias\n   (-> (n/keyword-node :ns-alias/kw true)\n       n/string)\n   ;; => \"::ns-alias/kw\"\n   ```"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:auto-resolved?","~:map-qualifier","^U","~:k","^J","~:prefix","~:token","~:keyword","~:current","~$k","~:auto-resolve"]],"~:order",["^2:","^28","^2>","^2=","^29","~:k","^2;","^2<","~$k","^U","^J"]],"^1R",null,"~:as-aliases",["^ "]]
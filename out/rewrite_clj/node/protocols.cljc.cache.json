["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$rewrite-clj.node.protocols","~:imports",null,"~:requires",["^ ","~$string","~$clojure.string","^:","^:","~$interop","~$rewrite-clj.interop","^<","^<"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$child-sexprs",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","~:line",98,"~:column",7,"~:end-line",98,"~:end-column",19,"~:arglists",["~#list",["~$quote",["^I",[["~$node"],["^K","~$opts"]]]]],"~:doc","Returns children for `node` converted to Clojure forms.\n\n  Optional `opts` can specify:\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["^K"],["^K","^L"]],"^H",["^I",[["^K"],["^K","^L"]]],"~:arglists-meta",["^I",[null,null]]]],"^5","~$rewrite-clj.node.protocols/child-sexprs","^C","out/rewrite_clj/node/protocols.cljc","^G",19,"^N",["^ ","^O",false,"^P",2,"^Q",2,"^R",[["^K"],["^K","^L"]],"^H",["^I",[["^K"],["^K","^L"]]],"^S",["^I",[null,null]]],"^R",[["^K"],["^K","^L"]],"~:protocol-impl",null,"^P",2,"^S",["^I",[null,null]],"^E",1,"^O",false,"~:methods",[["^ ","^P",1,"^O",false,"~:tag","~$any"],["^ ","^P",2,"^O",false,"^W",["^4",["~$cljs.core/LazySeq","~$clj-nil"]]]],"^D",98,"^F",98,"^Q",2,"~:fn-var",true,"^H",["^I",[["^K"],["^K","^L"]]],"^M","Returns children for `node` converted to Clojure forms.\n\n  Optional `opts` can specify:\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)"],"~$tag",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",11,"^E",4,"^F",11,"^G",7,"~:protocol","~$rewrite-clj.node.protocols/Node","^M","Returns keyword representing type of `node`.","^H",["^I",["^J",["^I",[["^K"]]]]]],"^11","^12","^5","~$rewrite-clj.node.protocols/tag","^C","out/rewrite_clj/node/protocols.cljc","^G",7,"^R",["^I",[["^K"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",9,"~:ret-tag","^X","^F",11,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["^K"]]]]],"^M","Returns keyword representing type of `node`."],"~$MapQualifiable",["^ ","^B",["^ ","~:protocol-symbol",true,"^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^G",28,"^E",14,"^D",125,"~:protocol-info",["^ ","^V",["^ ","~$map-context-apply",[["^K","~$map-qualifier"]],"~$map-context-clear",[["^K"]]]],"^F",125,"~:sigs",["^ ","~:map-context-apply",["^ ","^5","^18","^H",["^I",[["^K","^19"]]],"^M","Applies `map-qualifier` context to `node`"],"~:map-context-clear",["^ ","^5","^1:","^H",["^I",[["^K"]]],"^M","Removes map-qualifier context for `node`"]],"^M","Protocol for nodes that can be namespaced map qualified","~:jsdoc",["^I",["@interface"]]],"^16",true,"^5","~$rewrite-clj.node.protocols/MapQualifiable","^C","out/rewrite_clj/node/protocols.cljc","^G",28,"^E",1,"^D",125,"^17",["^ ","^V",["^ ","^18",[["^K","^19"]],"^1:",[["^K"]]]],"~:info",null,"^F",125,"^W","^X","^1;",["^ ","^1<",["^ ","^5","^18","^H",["^I",[["^K","^19"]]],"^M","Applies `map-qualifier` context to `node`"],"^1=",["^ ","^5","^1:","^H",["^I",[["^K"]]],"^M","Removes map-qualifier context for `node`"]],"~:impls",["^4",[]],"^M","Protocol for nodes that can be namespaced map qualified","^1>",["^I",["@interface"]]],"~$make-printable-cljs!",["^ ","~:no-doc",true,"^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",158,"^E",19,"^F",158,"^G",39,"^1C",true,"^H",["^I",["^J",["^I",[["~$obj"]]]]]],"^5","~$rewrite-clj.node.protocols/make-printable-cljs!","^C","out/rewrite_clj/node/protocols.cljc","^G",39,"^R",["^I",[["^1D"]]],"^U",null,"^S",["^I",[null,null]],"^E",4,"^O",false,"^D",158,"^F",158,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["^1D"]]]]]],"^1:",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",129,"^E",4,"^F",129,"^G",21,"^11","^1?","^M","Removes map-qualifier context for `node`","^H",["^I",["^J",["^I",[["^K"]]]]]],"^11","^1?","^5","~$rewrite-clj.node.protocols/map-context-clear","^C","out/rewrite_clj/node/protocols.cljc","^G",21,"^R",["^I",[["^K"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",125,"^14","^X","^F",129,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["^K"]]]]],"^M","Removes map-qualifier context for `node`"],"~$make-printable!",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",165,"^E",7,"^F",165,"^G",22,"^H",["^I",["^J",["^I",[["^1D"]]]]]],"^5","~$rewrite-clj.node.protocols/make-printable!","^C","out/rewrite_clj/node/protocols.cljc","^G",22,"^R",["^I",[["^1D"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",165,"^14","^X","^F",165,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["^1D"]]]]]],"~$without-whitespace",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",171,"^E",7,"^F",171,"^G",25,"^H",["^I",["^J",["^I",[["~$nodes"]]]]]],"^5","~$rewrite-clj.node.protocols/without-whitespace","^C","out/rewrite_clj/node/protocols.cljc","^G",25,"^R",["^I",[["^1J"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",171,"^14","^Y","^F",171,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["^1J"]]]]]],"~$default-auto-resolve",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",114,"^E",7,"^F",114,"^G",27,"^H",["^I",["^J",["^I",[["~$alias"]]]]]],"^5","~$rewrite-clj.node.protocols/default-auto-resolve","^C","out/rewrite_clj/node/protocols.cljc","^G",27,"^R",["^I",[["^1M"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",114,"^14",["^4",["^X","~$cljs.core/Symbol"]],"^F",114,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["^1M"]]]]]],"~$children",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",81,"^E",4,"^F",81,"^G",12,"^11","~$rewrite-clj.node.protocols/InnerNode","^M","Returns child nodes for `node`.","^H",["^I",["^J",["^I",[["^K"]]]]]],"^11","^1Q","^5","~$rewrite-clj.node.protocols/children","^C","out/rewrite_clj/node/protocols.cljc","^G",12,"^R",["^I",[["^K"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",77,"^14","^X","^F",81,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["^K"]]]]],"^M","Returns child nodes for `node`."],"~$sexprs",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",51,"^E",7,"^F",51,"^G",13,"^H",["^I",["^J",["^I",[["^1J"],["^1J","^L"]]]]],"^M","Return forms for `nodes`. Nodes that do not represent s-expression are skipped.\n\n  Optional `opts` can specify:\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances).","^N",["^ ","^O",false,"^P",2,"^Q",2,"^R",[["^1J"],["^1J","^L"]],"^H",["^I",[["^1J"],["^1J","^L"]]],"^S",["^I",[null,null]]]],"^5","~$rewrite-clj.node.protocols/sexprs","^C","out/rewrite_clj/node/protocols.cljc","^G",13,"^N",["^ ","^O",false,"^P",2,"^Q",2,"^R",[["^1J"],["^1J","^L"]],"^H",["^I",[["^1J"],["^1J","^L"]]],"^S",["^I",[null,null]]],"^R",[["^1J"],["^1J","^L"]],"^U",null,"^P",2,"^S",["^I",[null,null]],"^E",1,"^O",false,"^V",[["^ ","^P",1,"^O",false,"^W","^X"],["^ ","^P",2,"^O",false,"^W","^Y"]],"^D",51,"^F",51,"^Q",2,"^[",true,"^H",["^I",[["^1J"],["^1J","^L"]]],"^M","Return forms for `nodes`. Nodes that do not represent s-expression are skipped.\n\n  Optional `opts` can specify:\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances)."],"~$inner?",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",79,"^E",4,"^F",79,"^G",10,"^11","^1Q","^M","Returns true if `node` can have children.","^H",["^I",["^J",["^I",[["^K"]]]]]],"^11","^1Q","^5","~$rewrite-clj.node.protocols/inner?","^C","out/rewrite_clj/node/protocols.cljc","^G",10,"^R",["^I",[["^K"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",77,"^14","^X","^F",79,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["^K"]]]]],"^M","Returns true if `node` can have children."],"~$replace-children",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",83,"^E",4,"^F",83,"^G",20,"^11","^1Q","^M","Returns `node` replacing current children with `children`.","^H",["^I",["^J",["^I",[["^K","^1P"]]]]]],"^11","^1Q","^5","~$rewrite-clj.node.protocols/replace-children","^C","out/rewrite_clj/node/protocols.cljc","^G",20,"^R",["^I",[["^K","^1P"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",77,"^14","^X","^F",83,"^Q",2,"^[",true,"^H",["^I",["^J",["^I",[["^K","^1P"]]]]],"^M","Returns `node` replacing current children with `children`."],"~$+extent",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",216,"^E",7,"^F",216,"^G",14,"^H",["^I",["^J",["^I",[[["~$row","~$col"],["~$row-extent","~$col-extent"]]]]]]],"^5","~$rewrite-clj.node.protocols/+extent","^C","out/rewrite_clj/node/protocols.cljc","^G",14,"^R",["^I",[["~$p__603","~$p__604"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",216,"^14","~$cljs.core/IVector","^F",216,"^Q",2,"^[",true,"^H",["^I",["^J",["^I",[[["^1Z","^1["],["^20","^21"]]]]]]],"~$InnerNode",["^ ","^B",["^ ","^16",true,"^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^G",23,"^E",14,"^D",77,"^17",["^ ","^V",["^ ","^1U",[["^K"]],"^1P",[["^K"]],"^1W",[["^K","^1P"]],"~$leader-length",[["^K"]]]],"^F",77,"^1;",["^ ","~:inner?",["^ ","^5","^1U","^H",["^I",[["^K"]]],"^M","Returns true if `node` can have children."],"~:children",["^ ","^5","^1P","^H",["^I",[["^K"]]],"^M","Returns child nodes for `node`."],"~:replace-children",["^ ","^5","^1W","^H",["^I",[["^K","^1P"]]],"^M","Returns `node` replacing current children with `children`."],"~:leader-length",["^ ","^5","^27","^H",["^I",[["^K"]]],"^M","Returns number of characters before children for `node`."]],"^M","Protocol for non-leaf EDN/Clojure/ClojureScript nodes.","^1>",["^I",["@interface"]]],"^16",true,"^5","^1Q","^C","out/rewrite_clj/node/protocols.cljc","^G",23,"^E",1,"^D",77,"^17",["^ ","^V",["^ ","^1U",[["^K"]],"^1P",[["^K"]],"^1W",[["^K","^1P"]],"^27",[["^K"]]]],"^1@",null,"^F",77,"^W","^X","^1;",["^ ","^28",["^ ","^5","^1U","^H",["^I",[["^K"]]],"^M","Returns true if `node` can have children."],"^29",["^ ","^5","^1P","^H",["^I",[["^K"]]],"^M","Returns child nodes for `node`."],"^2:",["^ ","^5","^1W","^H",["^I",[["^K","^1P"]]],"^M","Returns `node` replacing current children with `children`."],"^2;",["^ ","^5","^27","^H",["^I",[["^K"]]],"^M","Returns number of characters before children for `node`."]],"^1A",["^4",["~$default"]],"^M","Protocol for non-leaf EDN/Clojure/ClojureScript nodes.","^1>",["^I",["@interface"]]],"~$printable-only?",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",16,"^E",4,"^F",16,"^G",19,"^11","^12","^M","Return true if `node` cannot be converted to an s-expression element.","^H",["^I",["^J",["^I",[["^K"]]]]]],"^11","^12","^5","~$rewrite-clj.node.protocols/printable-only?","^C","out/rewrite_clj/node/protocols.cljc","^G",19,"^R",["^I",[["^K"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",9,"^14","^X","^F",16,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["^K"]]]]],"^M","Return true if `node` cannot be converted to an s-expression element."],"^27",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",85,"^E",4,"^F",85,"^G",17,"^11","^1Q","^M","Returns number of characters before children for `node`.","^H",["^I",["^J",["^I",[["^K"]]]]]],"^11","^1Q","^5","~$rewrite-clj.node.protocols/leader-length","^C","out/rewrite_clj/node/protocols.cljc","^G",17,"^R",["^I",[["^K"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",77,"^14","^X","^F",85,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["^K"]]]]],"^M","Returns number of characters before children for `node`."],"~$sexpr-able?",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",34,"^E",7,"^F",34,"^G",18,"^H",["^I",["^J",["^I",[["^K"]]]]],"^M","Return true if [[sexpr]] is supported for `node`'s element type.\n\n   See [related docs in user guide](/doc/01-user-guide.adoc#not-all-clojure-is-sexpr-able)"],"^5","~$rewrite-clj.node.protocols/sexpr-able?","^C","out/rewrite_clj/node/protocols.cljc","^G",18,"^R",["^I",[["^K"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",34,"^14","~$boolean","^F",34,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["^K"]]]]],"^M","Return true if [[sexpr]] is supported for `node`'s element type.\n\n   See [related docs in user guide](/doc/01-user-guide.adoc#not-all-clojure-is-sexpr-able)"],"~$sexpr",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",41,"^E",7,"^F",41,"^G",12,"^H",["^I",["^J",["^I",[["^K"],["^K","^L"]]]]],"^M","Return `node` converted to form.\n\n  Optional `opts` can specify:\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances).","^N",["^ ","^O",false,"^P",2,"^Q",2,"^R",[["^K"],["^K","^L"]],"^H",["^I",[["^K"],["^K","^L"]]],"^S",["^I",[null,null]]]],"^5","~$rewrite-clj.node.protocols/sexpr","^C","out/rewrite_clj/node/protocols.cljc","^G",12,"^N",["^ ","^O",false,"^P",2,"^Q",2,"^R",[["^K"],["^K","^L"]],"^H",["^I",[["^K"],["^K","^L"]]],"^S",["^I",[null,null]]],"^R",[["^K"],["^K","^L"]],"^U",null,"^P",2,"^S",["^I",[null,null]],"^E",1,"^O",false,"^V",[["^ ","^P",1,"^O",false,"^W","^X"],["^ ","^P",2,"^O",false,"^W","^X"]],"^D",41,"^F",41,"^Q",2,"^[",true,"^H",["^I",[["^K"],["^K","^L"]]],"^M","Return `node` converted to form.\n\n  Optional `opts` can specify:\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances)."],"~$value",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",227,"^E",7,"^F",227,"^G",12,"^H",["^I",["^J",["^I",[["^K"]]]]],"^M","DEPRECATED: Get first child as a pair of tag/sexpr (if inner node),\n   or just the node's own sexpr. (use explicit analysis of `children`\n   `child-sexprs` instead) "],"^5","~$rewrite-clj.node.protocols/value","^C","out/rewrite_clj/node/protocols.cljc","^G",12,"^R",["^I",[["^K"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",227,"^14",["^4",["^X","^Z"]],"^F",227,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["^K"]]]]],"^M","DEPRECATED: Get first child as a pair of tag/sexpr (if inner node),\n   or just the node's own sexpr. (use explicit analysis of `children`\n   `child-sexprs` instead) "],"~$meta-elided",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",221,"^E",7,"^F",221,"^G",18,"^H",["^I",["^J",["^I",[["~$form"]]]]],"^M","Same as `clojure.core/meta` but with positional metadata removed.\n  Use when you want to omit reader generated metadata on forms."],"^5","~$rewrite-clj.node.protocols/meta-elided","^C","out/rewrite_clj/node/protocols.cljc","^G",18,"^R",["^I",[["^2H"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",221,"^14","^X","^F",221,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["^2H"]]]]],"^M","Same as `clojure.core/meta` but with positional metadata removed.\n  Use when you want to omit reader generated metadata on forms."],"~$sexpr*",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",18,"^E",4,"^F",18,"^G",10,"^11","^12","^M","Return `node` converted to form applying `opts`. Internal, use `sexpr` instead.","^H",["^I",["^J",["^I",[["^K","^L"]]]]]],"^11","^12","^5","~$rewrite-clj.node.protocols/sexpr*","^C","out/rewrite_clj/node/protocols.cljc","^G",10,"^R",["^I",[["^K","^L"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",9,"^14","^X","^F",18,"^Q",2,"^[",true,"^H",["^I",["^J",["^I",[["^K","^L"]]]]],"^M","Return `node` converted to form applying `opts`. Internal, use `sexpr` instead."],"~$concat-strings",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",70,"^E",7,"^F",70,"^G",21,"^H",["^I",["^J",["^I",[["^1J"]]]]],"^M","Return string version of `nodes`."],"^5","~$rewrite-clj.node.protocols/concat-strings","^C","out/rewrite_clj/node/protocols.cljc","^G",21,"^R",["^I",[["^1J"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",70,"^14",["^4",[null,"^X"]],"^F",70,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["^1J"]]]]],"^M","Return string version of `nodes`."],"~$node-type",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",13,"^E",4,"^F",13,"^G",13,"^11","^12","^M","Returns keyword representing the node type for `node`.\n     Currently internal and used to support testing.","^H",["^I",["^J",["^I",[["^K"]]]]]],"^11","^12","^5","~$rewrite-clj.node.protocols/node-type","^C","out/rewrite_clj/node/protocols.cljc","^G",13,"^R",["^I",[["^K"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",9,"^14","^X","^F",13,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["^K"]]]]],"^M","Returns keyword representing the node type for `node`.\n     Currently internal and used to support testing."],"^9",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",22,"^E",4,"^F",22,"^G",10,"^11","^12","^M","Return the string version of `node`.","^H",["^I",["^J",["^I",[["^K"]]]]]],"^11","^12","^5","~$rewrite-clj.node.protocols/string","^C","out/rewrite_clj/node/protocols.cljc","^G",10,"^R",["^I",[["^K"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",9,"^14","^X","^F",22,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["^K"]]]]],"^M","Return the string version of `node`."],"~$assert-sexpr-count",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",175,"^E",7,"^F",175,"^G",25,"^H",["^I",["^J",["^I",[["^1J","~$c"]]]]]],"^5","~$rewrite-clj.node.protocols/assert-sexpr-count","^C","out/rewrite_clj/node/protocols.cljc","^G",25,"^R",["^I",[["^1J","~$c"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",175,"^14","^Z","^F",175,"^Q",2,"^[",true,"^H",["^I",["^J",["^I",[["^1J","~$c"]]]]]],"^18",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",127,"^E",4,"^F",127,"^G",21,"^11","^1?","^M","Applies `map-qualifier` context to `node`","^H",["^I",["^J",["^I",[["^K","^19"]]]]]],"^11","^1?","^5","~$rewrite-clj.node.protocols/map-context-apply","^C","out/rewrite_clj/node/protocols.cljc","^G",21,"^R",["^I",[["^K","^19"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",125,"^14","^X","^F",127,"^Q",2,"^[",true,"^H",["^I",["^J",["^I",[["^K","^19"]]]]],"^M","Applies `map-qualifier` context to `node`"],"~$sum-lengths",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",65,"^E",7,"^F",65,"^G",18,"^H",["^I",["^J",["^I",[["^1J"]]]]],"^M","Return total string length for `nodes`."],"^5","~$rewrite-clj.node.protocols/sum-lengths","^C","out/rewrite_clj/node/protocols.cljc","^G",18,"^R",["^I",[["^1J"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",65,"^14",["^4",[null,"^X"]],"^F",65,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["^1J"]]]]],"^M","Return total string length for `nodes`."],"~$assert-single-sexpr",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",182,"^E",7,"^F",182,"^G",26,"^H",["^I",["^J",["^I",[["^1J"]]]]]],"^5","~$rewrite-clj.node.protocols/assert-single-sexpr","^C","out/rewrite_clj/node/protocols.cljc","^G",26,"^R",["^I",[["^1J"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",182,"^14","^Z","^F",182,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["^1J"]]]]]],"~$extent",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",186,"^E",7,"^F",186,"^G",13,"^H",["^I",["^J",["^I",[["^K"]]]]],"^M","A node's extent is how far it moves the \"cursor\".\n\n  Rows are simple - if we have x newlines in the string representation, we\n  will always move the \"cursor\" x rows.\n\n  Columns are strange.  If we have *any* newlines at all in the textual\n  representation of a node, following nodes' column positions are not\n  affected by our startting column position at all.  So the second number\n  in the pair we return is interpreted as a relative column adjustment\n  when the first number in the pair (rows) is zero, and as an absolute\n  column position when rows is non-zero."],"^5","~$rewrite-clj.node.protocols/extent","^C","out/rewrite_clj/node/protocols.cljc","^G",13,"^R",["^I",[["^K"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",186,"^14","^25","^F",186,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["^K"]]]]],"^M","A node's extent is how far it moves the \"cursor\".\n\n  Rows are simple - if we have x newlines in the string representation, we\n  will always move the \"cursor\" x rows.\n\n  Columns are strange.  If we have *any* newlines at all in the textual\n  representation of a node, following nodes' column positions are not\n  affected by our startting column position at all.  So the second number\n  in the pair we return is interpreted as a relative column adjustment\n  when the first number in the pair (rows) is zero, and as an absolute\n  column position when rows is non-zero."],"~$node->string",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",134,"^E",8,"^F",134,"^G",20,"~:private",true,"^H",["^I",["^J",["^I",[["^K"]]]]]],"^2[",true,"^5","~$rewrite-clj.node.protocols/node->string","^C","out/rewrite_clj/node/protocols.cljc","^G",20,"^R",["^I",[["^K"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",134,"^14","^X","^F",134,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["^K"]]]]]],"~$length",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",20,"^E",4,"^F",20,"^G",10,"^11","^12","^M","Return number of characters for the string version of `node`.","^H",["^I",["^J",["^I",[["^K"]]]]]],"^11","^12","^5","~$rewrite-clj.node.protocols/length","^C","out/rewrite_clj/node/protocols.cljc","^G",10,"^R",["^I",[["^K"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",9,"^14","^X","^F",20,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["^K"]]]]],"^M","Return number of characters for the string version of `node`."],"~$node?",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",109,"^E",7,"^F",109,"^G",12,"^H",["^I",["^J",["^I",[["~$x"]]]]],"^M","Returns true if `x` is a rewrite-clj created node."],"^5","~$rewrite-clj.node.protocols/node?","^C","out/rewrite_clj/node/protocols.cljc","^G",12,"^R",["^I",[["~$x"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",109,"^14","^2B","^F",109,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["~$x"]]]]],"^M","Returns true if `x` is a rewrite-clj created node."],"~$NodeCoerceable",["^ ","^B",["^ ","^16",true,"^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^G",28,"^E",14,"^D",121,"^17",["^ ","^V",["^ ","~$coerce",[["^2H"]]]],"^F",121,"^1;",["^ ","~:coerce",["^ ","^5","^36","^H",["^I",[["^2H"]]],"^M","Coerce `form` to node."]],"^M","Protocol for values that can be coerced to nodes.","^1>",["^I",["@interface"]]],"^16",true,"^5","~$rewrite-clj.node.protocols/NodeCoerceable","^C","out/rewrite_clj/node/protocols.cljc","^G",28,"^E",1,"^D",121,"^17",["^ ","^V",["^ ","^36",[["^2H"]]]],"^1@",null,"^F",121,"^W","^X","^1;",["^ ","^37",["^ ","^5","^36","^H",["^I",[["^2H"]]],"^M","Coerce `form` to node."]],"^1A",["^4",[]],"^M","Protocol for values that can be coerced to nodes.","^1>",["^I",["@interface"]]],"~$Node",["^ ","^B",["^ ","^16",true,"^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^G",18,"^E",14,"^D",9,"^17",["^ ","^V",["^ ","^10",[["^K"]],"^2N",[["^K"]],"^2=",[["^K"]],"^2J",[["^K","^L"]],"^31",[["^K"]],"^9",[["^K"]]]],"^F",9,"^1;",["^ ","^W",["^ ","^5","^10","^H",["^I",[["^K"]]],"^M","Returns keyword representing type of `node`."],"~:node-type",["^ ","^5","^2N","^H",["^I",[["^K"]]],"^M","Returns keyword representing the node type for `node`.\n     Currently internal and used to support testing."],"~:printable-only?",["^ ","^5","^2=","^H",["^I",[["^K"]]],"^M","Return true if `node` cannot be converted to an s-expression element."],"~:sexpr*",["^ ","^5","^2J","^H",["^I",[["^K","^L"]]],"^M","Return `node` converted to form applying `opts`. Internal, use `sexpr` instead."],"~:length",["^ ","^5","^31","^H",["^I",[["^K"]]],"^M","Return number of characters for the string version of `node`."],"~:string",["^ ","^5","^9","^H",["^I",[["^K"]]],"^M","Return the string version of `node`."]],"^M","Protocol for EDN/Clojure/ClojureScript nodes.","^1>",["^I",["@interface"]]],"^16",true,"^5","^12","^C","out/rewrite_clj/node/protocols.cljc","^G",18,"^E",1,"^D",9,"^17",["^ ","^V",["^ ","^10",[["^K"]],"^2N",[["^K"]],"^2=",[["^K"]],"^2J",[["^K","^L"]],"^31",[["^K"]],"^9",[["^K"]]]],"^1@",null,"^F",9,"^W","^X","^1;",["^ ","^W",["^ ","^5","^10","^H",["^I",[["^K"]]],"^M","Returns keyword representing type of `node`."],"^3:",["^ ","^5","^2N","^H",["^I",[["^K"]]],"^M","Returns keyword representing the node type for `node`.\n     Currently internal and used to support testing."],"^3;",["^ ","^5","^2=","^H",["^I",[["^K"]]],"^M","Return true if `node` cannot be converted to an s-expression element."],"^3<",["^ ","^5","^2J","^H",["^I",[["^K","^L"]]],"^M","Return `node` converted to form applying `opts`. Internal, use `sexpr` instead."],"^3=",["^ ","^5","^31","^H",["^I",[["^K"]]],"^M","Return number of characters for the string version of `node`."],"^3>",["^ ","^5","^9","^H",["^I",[["^K"]]],"^M","Return the string version of `node`."]],"^1A",["^4",["^2<"]],"^M","Protocol for EDN/Clojure/ClojureScript nodes.","^1>",["^I",["@interface"]]],"^36",["^ ","^A",null,"^B",["^ ","^C","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/node/protocols.cljc","^D",123,"^E",4,"^F",123,"^G",10,"^11","^38","^M","Coerce `form` to node.","^H",["^I",["^J",["^I",[["^2H"]]]]]],"^11","^38","^5","~$rewrite-clj.node.protocols/coerce","^C","out/rewrite_clj/node/protocols.cljc","^G",10,"^R",["^I",[["^2H"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",121,"^14","^X","^F",123,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["^2H"]]]]],"^M","Coerce `form` to node."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:next-col","~:unknown","^G","^E","^D","~:col","~:current","^F","~$?_current-ns_?","~:row","~:next-row"]],"~:order",["^3E","^3G","^3H","^3I","^3F","^3J","^3D","^D","^E","^F","^G"]],"^M",null,"~:as-aliases",["^ "]]
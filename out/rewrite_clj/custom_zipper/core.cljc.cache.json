["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$defn-switchable","~$rewrite-clj.custom-zipper.switchable"],"~:excludes",["~#set",["~$remove","~$replace","~$next"]],"~:name","~$rewrite-clj.custom-zipper.core","~:imports",null,"~:requires",["^ ","~$clj-zip","~$clojure.zip","^?","^?","^4","^4","~$node","~$rewrite-clj.node.protocols","^A","^A"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^3","^4"],"~:defs",["^ ","~$rightmost",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/custom_zipper/core.cljc","~:line",156,"~:column",18,"~:end-line",156,"~:end-column",27,"~:arglists",["~#list",["~$quote",["^N",[["~$zloc"]]]]],"~:doc","Returns zipper with location at the rightmost sibling of the current node in `zloc`, or self."],"^:","~$rewrite-clj.custom-zipper.core/rightmost","^H","out/rewrite_clj/custom_zipper/core.cljc","^L",27,"~:method-params",["^N",[["~$G__660"]]],"~:protocol-impl",null,"~:arglists-meta",["^N",[null,null]],"^J",1,"~:variadic?",false,"^I",156,"~:ret-tag",["^6",[null,"~$clj","~$cljs.core/MetaFn","~$clj-nil"]],"^K",156,"~:max-fixed-arity",1,"~:fn-var",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns zipper with location at the rightmost sibling of the current node in `zloc`, or self."],"~$insert-child",["^ ","^F",null,"^G",["^ ","^H","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/custom_zipper/core.cljc","^I",225,"^J",18,"^K",225,"^L",30,"^M",["^N",["^O",["^N",[["^P","~$item"]]]]],"^Q","Returns zipper with node `item` inserted as the leftmost child of the current node in `zloc`,\n  without moving location."],"^:","~$rewrite-clj.custom-zipper.core/insert-child","^H","out/rewrite_clj/custom_zipper/core.cljc","^L",30,"^S",["^N",[["~$G__686","~$G__687"]]],"^U",null,"^V",["^N",[null,null]],"^J",1,"^W",false,"^I",225,"^X",["^6",["^Y","~$any","^Z","^["]],"^K",225,"^10",2,"^11",true,"^M",["^N",["^O",["^N",[["^P","^13"]]]]],"^Q","Returns zipper with node `item` inserted as the leftmost child of the current node in `zloc`,\n  without moving location."],"~$left",["^ ","^F",null,"^G",["^ ","^H","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/custom_zipper/core.cljc","^I",163,"^J",18,"^K",163,"^L",22,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns zipper with location at the left sibling of the current node in `zloc`, or nil."],"^:","~$rewrite-clj.custom-zipper.core/left","^H","out/rewrite_clj/custom_zipper/core.cljc","^L",22,"^S",["^N",[["~$G__662"]]],"^U",null,"^V",["^N",[null,null]],"^J",1,"^W",false,"^I",163,"^X",["^6",["^Y","^17","^Z","^["]],"^K",163,"^10",1,"^11",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns zipper with location at the left sibling of the current node in `zloc`, or nil."],"~$leftmost",["^ ","^F",null,"^G",["^ ","^H","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/custom_zipper/core.cljc","^I",175,"^J",18,"^K",175,"^L",26,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns zipper with location at the leftmost sibling of the current node in `zloc`, or self."],"^:","~$rewrite-clj.custom-zipper.core/leftmost","^H","out/rewrite_clj/custom_zipper/core.cljc","^L",26,"^S",["^N",[["~$G__667"]]],"^U",null,"^V",["^N",[null,null]],"^J",1,"^W",false,"^I",175,"^X",["^6",[null,"^Y","^17","^Z","^["]],"^K",175,"^10",1,"^11",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns zipper with location at the leftmost sibling of the current node in `zloc`, or self."],"~$append-child",["^ ","^F",null,"^G",["^ ","^H","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/custom_zipper/core.cljc","^I",231,"^J",18,"^K",231,"^L",30,"^M",["^N",["^O",["^N",[["^P","^13"]]]]],"^Q","Returns zipper with node `item` inserted as the rightmost child of the current node in `zloc`,\n  without moving."],"^:","~$rewrite-clj.custom-zipper.core/append-child","^H","out/rewrite_clj/custom_zipper/core.cljc","^L",30,"^S",["^N",[["~$G__688","~$G__689"]]],"^U",null,"^V",["^N",[null,null]],"^J",1,"^W",false,"^I",231,"^X",["^6",["^Y","^17","^Z","^["]],"^K",231,"^10",2,"^11",true,"^M",["^N",["^O",["^N",[["^P","^13"]]]]],"^Q","Returns zipper with node `item` inserted as the rightmost child of the current node in `zloc`,\n  without moving."],"~$branch?",["^ ","^F",null,"^G",["^ ","^H","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/custom_zipper/core.cljc","^I",60,"^J",18,"^K",60,"^L",25,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns true if the current node in `zloc` is a branch."],"^:","~$rewrite-clj.custom-zipper.core/branch?","^H","out/rewrite_clj/custom_zipper/core.cljc","^L",25,"^S",["^N",[["~$G__636"]]],"^U",null,"^V",["^N",[null,null]],"^J",1,"^W",false,"^I",60,"^X","^17","^K",60,"^10",1,"^11",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns true if the current node in `zloc` is a branch."],"~$children",["^ ","^F",null,"^G",["^ ","^H","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/custom_zipper/core.cljc","^I",65,"^J",18,"^K",65,"^L",26,"^M",["^N",["^O",["^N",[[["^ ","~:keys",["^@"],"~:as","^P"]]]]]],"^Q","Returns a seq of the children of current node in `zloc`, which must be a branch."],"^:","~$rewrite-clj.custom-zipper.core/children","^H","out/rewrite_clj/custom_zipper/core.cljc","^L",26,"^S",["^N",[["~$G__637"]]],"^U",null,"^V",["^N",[null,null]],"^J",1,"^W",false,"^I",65,"^X",["^6",["~$seq","^17"]],"^K",65,"^10",1,"^11",true,"^M",["^N",["^O",["^N",[[["^ ","^1F",["^@"],"^1G","^P"]]]]]],"^Q","Returns a seq of the children of current node in `zloc`, which must be a branch."],"~$custom-zipper",["^ ","^F",null,"^G",["^ ","^H","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/custom_zipper/core.cljc","^I",32,"^J",7,"^K",32,"^L",20,"^M",["^N",["^O",["^N",[["~$root"]]]]]],"^:","~$rewrite-clj.custom-zipper.core/custom-zipper","^H","out/rewrite_clj/custom_zipper/core.cljc","^L",20,"^S",["^N",[["^1L"]]],"^U",null,"^V",["^N",[null,null]],"^J",1,"^W",false,"^I",32,"^X","~$cljs.core/IMap","^K",32,"^10",1,"^11",true,"^M",["^N",["^O",["^N",[["^1L"]]]]]],"^7",["^ ","^F",null,"^G",["^ ","^H","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/custom_zipper/core.cljc","^I",268,"^J",18,"^K",268,"^L",24,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns zipper with current node in `zloc` removed, with location at node that would have preceded\n  it in a depth-first walk."],"^:","~$rewrite-clj.custom-zipper.core/remove","^H","out/rewrite_clj/custom_zipper/core.cljc","^L",24,"^S",["^N",[["~$G__695"]]],"^U",null,"^V",["^N",[null,null]],"^J",1,"^W",false,"^I",268,"^X",["^6",[null,"^Y","^17","^Z","^["]],"^K",268,"^10",1,"^11",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns zipper with current node in `zloc` removed, with location at node that would have preceded\n  it in a depth-first walk."],"~$down",["^ ","^F",null,"^G",["^ ","^H","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/custom_zipper/core.cljc","^I",104,"^J",18,"^K",104,"^L",22,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns zipper with the location at the leftmost child of current node in `zloc`, or\n  nil if no children."],"^:","~$rewrite-clj.custom-zipper.core/down","^H","out/rewrite_clj/custom_zipper/core.cljc","^L",22,"^S",["^N",[["~$G__643"]]],"^U",null,"^V",["^N",[null,null]],"^J",1,"^W",false,"^I",104,"^X",["^6",["^Y","^Z","^["]],"^K",104,"^10",1,"^11",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns zipper with the location at the leftmost child of current node in `zloc`, or\n  nil if no children."],"^8",["^ ","^F",null,"^G",["^ ","^H","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/custom_zipper/core.cljc","^I",211,"^J",18,"^K",211,"^L",25,"^M",["^N",["^O",["^N",[["^P","^13"]]]]],"^Q","Returns zipper with node `item` replacing current node in `zloc`, without moving location."],"^:","~$rewrite-clj.custom-zipper.core/replace","^H","out/rewrite_clj/custom_zipper/core.cljc","^L",25,"^S",["^N",[["~$G__678","~$G__679"]]],"^U",null,"^V",["^N",[null,null]],"^J",1,"^W",false,"^I",211,"^X",["^6",["^Y","^17","^Z","^["]],"^K",211,"^10",2,"^11",true,"^M",["^N",["^O",["^N",[["^P","^13"]]]]],"^Q","Returns zipper with node `item` replacing current node in `zloc`, without moving location."],"~$zipper",["^ ","^F",null,"^G",["^ ","^H","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/custom_zipper/core.cljc","^I",41,"^J",7,"^K",41,"^L",13,"^M",["^N",["^O",["^N",[["^1L"]]]]]],"^:","~$rewrite-clj.custom-zipper.core/zipper","^H","out/rewrite_clj/custom_zipper/core.cljc","^L",13,"^S",["^N",[["^1L"]]],"^U",null,"^V",["^N",[null,null]],"^J",1,"^W",false,"^I",41,"^X","^17","^K",41,"^10",1,"^11",true,"^M",["^N",["^O",["^N",[["^1L"]]]]]],"~$end?",["^ ","^F",null,"^G",["^ ","^H","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/custom_zipper/core.cljc","^I",263,"^J",18,"^K",263,"^L",22,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns true if at end of depth-first walk in `zloc`."],"^:","~$rewrite-clj.custom-zipper.core/end?","^H","out/rewrite_clj/custom_zipper/core.cljc","^L",22,"^S",["^N",[["~$G__694"]]],"^U",null,"^V",["^N",[null,null]],"^J",1,"^W",false,"^I",263,"^X",["^6",["~$boolean","^17"]],"^K",263,"^10",1,"^11",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns true if at end of depth-first walk in `zloc`."],"~$edit",["^ ","^F",null,"^G",["^ ","^H","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/custom_zipper/core.cljc","^I",216,"^J",7,"^K",216,"^L",11,"^M",["^N",["^O",["^N",[["^P","~$f","~$&","~$args"]]]]],"^Q","Returns zipper with value of `(apply f current-node args)` replacing current node in `zloc`.\n\n   The result of `f` should be a rewrite-clj node.","~:top-fn",["^ ","^W",true,"~:fixed-arity",2,"^10",2,"^S",[["^N",["^P","~$f","^22"]]],"^M",["^N",[["^P","~$f","~$&","^22"]]],"^V",["^N",[null]]]],"^:","~$rewrite-clj.custom-zipper.core/edit","^H","out/rewrite_clj/custom_zipper/core.cljc","^L",11,"^23",["^ ","^W",true,"^24",2,"^10",2,"^S",[["^N",["^P","~$f","^22"]]],"^M",["^N",[["^P","~$f","~$&","^22"]]],"^V",["^N",[null]]],"^S",[["^N",["^P","~$f","^22"]]],"^U",null,"^24",2,"^V",["^N",[null]],"^J",1,"^W",true,"~:methods",[["^ ","^24",2,"^W",true,"~:tag",["^6",["^Y","^17","^Z","^["]]]],"^I",216,"^X","^17","^K",216,"^10",2,"^11",true,"^M",["^N",[["^P","~$f","~$&","^22"]]],"^Q","Returns zipper with value of `(apply f current-node args)` replacing current node in `zloc`.\n\n   The result of `f` should be a rewrite-clj node."],"~$position-span",["^ ","^F",null,"^G",["^ ","^H","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/custom_zipper/core.cljc","^I",90,"^J",7,"^K",90,"^L",20,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns the ones-based `[[start-row start-col] [end-row end-col]]` of the current node in `zloc`.\n  `end-col` is exclusive.\n\n  Throws if `zloc` was not created with [position tracking](/doc/01-user-guide.adoc#position-tracking)."],"^:","~$rewrite-clj.custom-zipper.core/position-span","^H","out/rewrite_clj/custom_zipper/core.cljc","^L",20,"^S",["^N",[["^P"]]],"^U",null,"^V",["^N",[null,null]],"^J",1,"^W",false,"^I",90,"^X","~$cljs.core/IVector","^K",90,"^10",1,"^11",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns the ones-based `[[start-row start-col] [end-row end-col]]` of the current node in `zloc`.\n  `end-col` is exclusive.\n\n  Throws if `zloc` was not created with [position tracking](/doc/01-user-guide.adoc#position-tracking)."],"~$make-node",["^ ","^F",null,"^G",["^ ","^H","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/custom_zipper/core.cljc","^I",72,"^J",18,"^K",72,"^L",27,"^M",["^N",["^O",["^N",[["~$_zloc","^@","^1E"]]]]],"^Q","Returns a new branch node, given an existing `node` and new\n  `children`. "],"^:","~$rewrite-clj.custom-zipper.core/make-node","^H","out/rewrite_clj/custom_zipper/core.cljc","^L",27,"^S",["^N",[["~$G__639","~$G__640","~$G__641"]]],"^U",null,"^V",["^N",[null,null]],"^J",1,"^W",false,"^I",72,"^X","^17","^K",72,"^10",3,"^11",true,"^M",["^N",["^O",["^N",[["^2<","^@","^1E"]]]]],"^Q","Returns a new branch node, given an existing `node` and new\n  `children`. "],"^@",["^ ","^F",null,"^G",["^ ","^H","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/custom_zipper/core.cljc","^I",55,"^J",18,"^K",55,"^L",22,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns the current node in `zloc`."],"^:","~$rewrite-clj.custom-zipper.core/node","^H","out/rewrite_clj/custom_zipper/core.cljc","^L",22,"^S",["^N",[["~$G__635"]]],"^U",null,"^V",["^N",[null,null]],"^J",1,"^W",false,"^I",55,"^X","^17","^K",55,"^10",1,"^11",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns the current node in `zloc`."],"~$up",["^ ","^F",null,"^G",["^ ","^H","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/custom_zipper/core.cljc","^I",121,"^J",18,"^K",121,"^L",20,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns zipper with the location at the parent of current node in `zloc`, or nil if at\n  the top."],"^:","~$rewrite-clj.custom-zipper.core/up","^H","out/rewrite_clj/custom_zipper/core.cljc","^L",20,"^S",["^N",[["~$G__651"]]],"^U",null,"^V",["^N",[null,null]],"^J",1,"^W",false,"^I",121,"^X",["^6",["^Y","^17","^Z","^["]],"^K",121,"^10",1,"^11",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns zipper with the location at the parent of current node in `zloc`, or nil if at\n  the top."],"~$insert-right",["^ ","^F",null,"^G",["^ ","^H","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/custom_zipper/core.cljc","^I",200,"^J",18,"^K",200,"^L",30,"^M",["^N",["^O",["^N",[["^P","^13"]]]]],"^Q","Returns zipper with node `item` inserted as the right sibling of the current node in `zloc`,\n  without moving location."],"^:","~$rewrite-clj.custom-zipper.core/insert-right","^H","out/rewrite_clj/custom_zipper/core.cljc","^L",30,"^S",["^N",[["~$G__675","~$G__676"]]],"^U",null,"^V",["^N",[null,null]],"^J",1,"^W",false,"^I",200,"^X",["^6",["^Y","^17","^Z","^["]],"^K",200,"^10",2,"^11",true,"^M",["^N",["^O",["^N",[["^P","^13"]]]]],"^Q","Returns zipper with node `item` inserted as the right sibling of the current node in `zloc`,\n  without moving location."],"~$custom-zipper?",["^ ","^F",null,"^G",["^ ","^H","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/custom_zipper/core.cljc","^I",49,"^J",7,"^K",49,"^L",21,"^M",["^N",["^O",["^N",[["~$value"]]]]]],"^:","~$rewrite-clj.custom-zipper.core/custom-zipper?","^H","out/rewrite_clj/custom_zipper/core.cljc","^L",21,"^S",["^N",[["^2K"]]],"^U",null,"^V",["^N",[null,null]],"^J",1,"^W",false,"^I",49,"^X","^17","^K",49,"^10",1,"^11",true,"^M",["^N",["^O",["^N",[["^2K"]]]]]],"^1L",["^ ","^F",null,"^G",["^ ","^H","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/custom_zipper/core.cljc","^I",135,"^J",18,"^K",135,"^L",22,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Zips all the way up `zloc` and returns the root node, reflecting any changes."],"^:","~$rewrite-clj.custom-zipper.core/root","^H","out/rewrite_clj/custom_zipper/core.cljc","^L",22,"^S",["^N",[["~$G__653"]]],"^U",null,"^V",["^N",[null,null]],"^J",1,"^W",false,"^I",135,"^X","^17","^K",135,"^10",1,"^11",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Zips all the way up `zloc` and returns the root node, reflecting any changes."],"^9",["^ ","^F",null,"^G",["^ ","^H","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/custom_zipper/core.cljc","^I",237,"^J",18,"^K",237,"^L",22,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns zipper with location at the next depth-first location in the hierarchy in `zloc`.\n  When reaching the end, returns a distinguished zipper detectable via [[end?]]. If already\n  at the end, stays there."],"^:","~$rewrite-clj.custom-zipper.core/next","^H","out/rewrite_clj/custom_zipper/core.cljc","^L",22,"^S",["^N",[["~$G__690"]]],"^U",null,"^V",["^N",[null,null]],"^J",1,"^W",false,"^I",237,"^X",["^6",[null,"^Y","^2:","^17","^Z"]],"^K",237,"^10",1,"^11",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns zipper with location at the next depth-first location in the hierarchy in `zloc`.\n  When reaching the end, returns a distinguished zipper detectable via [[end?]]. If already\n  at the end, stays there."],"~$insert-left",["^ ","^F",null,"^G",["^ ","^H","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/custom_zipper/core.cljc","^I",188,"^J",18,"^K",188,"^L",29,"^M",["^N",["^O",["^N",[["^P","^13"]]]]],"^Q","Returns zipper with node `item` inserted as the left sibling of current node in `zloc`,\n without moving location."],"^:","~$rewrite-clj.custom-zipper.core/insert-left","^H","out/rewrite_clj/custom_zipper/core.cljc","^L",29,"^S",["^N",[["~$G__672","~$G__673"]]],"^U",null,"^V",["^N",[null,null]],"^J",1,"^W",false,"^I",188,"^X",["^6",["^Y","^17","^Z","^["]],"^K",188,"^10",2,"^11",true,"^M",["^N",["^O",["^N",[["^P","^13"]]]]],"^Q","Returns zipper with node `item` inserted as the left sibling of current node in `zloc`,\n without moving location."],"~$prev",["^ ","^F",null,"^G",["^ ","^H","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/custom_zipper/core.cljc","^I",252,"^J",18,"^K",252,"^L",22,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns zipper with location at the previous depth-first location in the hierarchy in `zloc`.\n  If already at the root, returns nil."],"^:","~$rewrite-clj.custom-zipper.core/prev","^H","out/rewrite_clj/custom_zipper/core.cljc","^L",22,"^S",["^N",[["~$G__692"]]],"^U",null,"^V",["^N",[null,null]],"^J",1,"^W",false,"^I",252,"^X",["^6",[null,"^Y","^17","^Z","^["]],"^K",252,"^10",1,"^11",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns zipper with location at the previous depth-first location in the hierarchy in `zloc`.\n  If already at the root, returns nil."],"~$right",["^ ","^F",null,"^G",["^ ","^H","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/custom_zipper/core.cljc","^I",145,"^J",18,"^K",145,"^L",23,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns zipper with location at the right sibling of the current node in `zloc`, or nil."],"^:","~$rewrite-clj.custom-zipper.core/right","^H","out/rewrite_clj/custom_zipper/core.cljc","^L",23,"^S",["^N",[["~$G__655"]]],"^U",null,"^V",["^N",[null,null]],"^J",1,"^W",false,"^I",145,"^X",["^6",["^Y","^17","^Z","^["]],"^K",145,"^10",1,"^11",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns zipper with location at the right sibling of the current node in `zloc`, or nil."],"~$lefts",["^ ","^F",null,"^G",["^ ","^H","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/custom_zipper/core.cljc","^I",99,"^J",18,"^K",99,"^L",23,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns a seq of the left siblings of current node in `zloc`."],"^:","~$rewrite-clj.custom-zipper.core/lefts","^H","out/rewrite_clj/custom_zipper/core.cljc","^L",23,"^S",["^N",[["~$G__642"]]],"^U",null,"^V",["^N",[null,null]],"^J",1,"^W",false,"^I",99,"^X",["^6",["^1J","~$cljs.core/LazySeq"]],"^K",99,"^10",1,"^11",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns a seq of the left siblings of current node in `zloc`."],"~$position",["^ ","^F",null,"^G",["^ ","^H","/Users/shivamsinghal/projects/open-source/clj-formatter/out/rewrite_clj/custom_zipper/core.cljc","^I",78,"^J",7,"^K",78,"^L",15,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns the ones-based `[row col]` of the start of the current node in `zloc`.\n\n  Throws if `zloc` was not created with [position tracking](/doc/01-user-guide.adoc#position-tracking)."],"^:","~$rewrite-clj.custom-zipper.core/position","^H","out/rewrite_clj/custom_zipper/core.cljc","^L",15,"^S",["^N",[["^P"]]],"^U",null,"^V",["^N",[null,null]],"^J",1,"^W",false,"^I",78,"^X","^17","^K",78,"^10",1,"^11",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","Returns the ones-based `[row col]` of the start of the current node in `zloc`.\n\n  Throws if `zloc` was not created with [position tracking](/doc/01-user-guide.adoc#position-tracking)."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^4","^4"],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:parent","~:end?","~:node","~:changed?","~:rewrite-clj.custom-zipper.core/custom?","~:right","~:position","~:left"]],"~:order",["^3=","^3;","^3?","^39","^3@","^3>","^3<","^3:"]],"^Q","This is the underlying zipper that rewrite-clj uses.\n\n   It delegates to two different zipper implementations:\n   1. the code herein under defn-switchable bodies when the user has created a `:track-position?` zipper\n   2. otherwise clojure.zip, with some small exceptions:\n      - `edit` explicitly handles the delegation - I assume because defn-switchable could not handle the argument delegation\n      - there are fns exclusive to the position trakcing zipper, `position`, `position-span`","~:as-aliases",["^ "]]